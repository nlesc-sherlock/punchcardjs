{
"node_modules/browserify/node_modules/browser-pack/_prelude.js":{"path":"node_modules/browserify/node_modules/browser-pack/_prelude.js","statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":null,"column":-1}}},"fnMap":{"1":{"name":"(anonymous_1)","line":1,"loc":{"start":{"line":1,"column":0},"end":{"line":null,"column":-1}}}},"branchMap":{"1":{"line":1,"type":"if","locations":[{"start":{"line":1,"column":0},"end":{"line":null,"column":-1}},{"start":{"line":1,"column":0},"end":{"line":null,"column":-1}}]}},"s":{"1":108},"b":{"1":[29,21]},"f":{"1":40},"code":"(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","l":{"1":108}},
"src/base.ts":{"path":"src/base.ts","statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":21}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":12}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":36}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":32}},"5":{"start":{"line":15,"column":0},"end":{"line":540,"column":1}},"6":{"start":{"line":127,"column":4},"end":{"line":164,"column":5}},"7":{"start":{"line":130,"column":8},"end":{"line":130,"column":21}},"8":{"start":{"line":133,"column":8},"end":{"line":133,"column":35}},"9":{"start":{"line":136,"column":8},"end":{"line":136,"column":63}},"10":{"start":{"line":140,"column":8},"end":{"line":140,"column":22}},"11":{"start":{"line":143,"column":8},"end":{"line":143,"column":29}},"12":{"start":{"line":146,"column":8},"end":{"line":146,"column":29}},"13":{"start":{"line":147,"column":8},"end":{"line":147,"column":30}},"14":{"start":{"line":148,"column":8},"end":{"line":148,"column":28}},"15":{"start":{"line":149,"column":8},"end":{"line":149,"column":32}},"16":{"start":{"line":150,"column":8},"end":{"line":150,"column":30}},"17":{"start":{"line":152,"column":8},"end":{"line":152,"column":36}},"18":{"start":{"line":153,"column":8},"end":{"line":153,"column":24}},"19":{"start":{"line":155,"column":8},"end":{"line":155,"column":33}},"20":{"start":{"line":156,"column":8},"end":{"line":156,"column":39}},"21":{"start":{"line":160,"column":8},"end":{"line":160,"column":29}},"22":{"start":{"line":161,"column":8},"end":{"line":163,"column":11}},"23":{"start":{"line":162,"column":12},"end":{"line":162,"column":28}},"24":{"start":{"line":175,"column":11},"end":{"line":179,"column":5}},"25":{"start":{"line":178,"column":8},"end":{"line":178,"column":20}},"26":{"start":{"line":188,"column":14},"end":{"line":205,"column":5}},"27":{"start":{"line":190,"column":8},"end":{"line":190,"column":105}},"28":{"start":{"line":191,"column":8},"end":{"line":191,"column":87}},"29":{"start":{"line":192,"column":8},"end":{"line":192,"column":40}},"30":{"start":{"line":193,"column":8},"end":{"line":193,"column":39}},"31":{"start":{"line":196,"column":8},"end":{"line":202,"column":48}},"32":{"start":{"line":204,"column":8},"end":{"line":204,"column":20}},"33":{"start":{"line":216,"column":14},"end":{"line":233,"column":5}},"34":{"start":{"line":218,"column":8},"end":{"line":218,"column":105}},"35":{"start":{"line":219,"column":8},"end":{"line":219,"column":87}},"36":{"start":{"line":220,"column":8},"end":{"line":220,"column":40}},"37":{"start":{"line":221,"column":8},"end":{"line":221,"column":39}},"38":{"start":{"line":224,"column":8},"end":{"line":230,"column":44}},"39":{"start":{"line":232,"column":8},"end":{"line":232,"column":20}},"40":{"start":{"line":242,"column":14},"end":{"line":257,"column":5}},"41":{"start":{"line":244,"column":8},"end":{"line":244,"column":105}},"42":{"start":{"line":245,"column":8},"end":{"line":245,"column":87}},"43":{"start":{"line":246,"column":8},"end":{"line":246,"column":50}},"44":{"start":{"line":247,"column":8},"end":{"line":247,"column":69}},"45":{"start":{"line":249,"column":8},"end":{"line":254,"column":52}},"46":{"start":{"line":256,"column":8},"end":{"line":256,"column":20}},"47":{"start":{"line":265,"column":14},"end":{"line":273,"column":5}},"48":{"start":{"line":268,"column":8},"end":{"line":268,"column":45}},"49":{"start":{"line":269,"column":8},"end":{"line":269,"column":22}},"50":{"start":{"line":272,"column":8},"end":{"line":272,"column":20}},"51":{"start":{"line":282,"column":14},"end":{"line":289,"column":5}},"52":{"start":{"line":284,"column":8},"end":{"line":286,"column":55}},"53":{"start":{"line":288,"column":8},"end":{"line":288,"column":20}},"54":{"start":{"line":298,"column":14},"end":{"line":312,"column":5}},"55":{"start":{"line":300,"column":8},"end":{"line":300,"column":105}},"56":{"start":{"line":301,"column":8},"end":{"line":301,"column":50}},"57":{"start":{"line":302,"column":8},"end":{"line":302,"column":45}},"58":{"start":{"line":304,"column":8},"end":{"line":309,"column":36}},"59":{"start":{"line":311,"column":8},"end":{"line":311,"column":20}},"60":{"start":{"line":321,"column":14},"end":{"line":346,"column":5}},"61":{"start":{"line":323,"column":8},"end":{"line":323,"column":40}},"62":{"start":{"line":324,"column":8},"end":{"line":324,"column":70}},"63":{"start":{"line":325,"column":8},"end":{"line":325,"column":87}},"64":{"start":{"line":328,"column":8},"end":{"line":330,"column":33}},"65":{"start":{"line":332,"column":8},"end":{"line":337,"column":30}},"66":{"start":{"line":339,"column":8},"end":{"line":342,"column":27}},"67":{"start":{"line":344,"column":8},"end":{"line":344,"column":20}},"68":{"start":{"line":355,"column":14},"end":{"line":370,"column":5}},"69":{"start":{"line":357,"column":8},"end":{"line":357,"column":87}},"70":{"start":{"line":358,"column":8},"end":{"line":358,"column":46}},"71":{"start":{"line":359,"column":8},"end":{"line":359,"column":49}},"72":{"start":{"line":361,"column":8},"end":{"line":366,"column":50}},"73":{"start":{"line":368,"column":8},"end":{"line":368,"column":20}},"74":{"start":{"line":382,"column":14},"end":{"line":394,"column":5}},"75":{"start":{"line":385,"column":8},"end":{"line":385,"column":31}},"76":{"start":{"line":388,"column":8},"end":{"line":390,"column":9}},"77":{"start":{"line":389,"column":12},"end":{"line":389,"column":44}},"78":{"start":{"line":392,"column":8},"end":{"line":392,"column":20}},"79":{"start":{"line":404,"column":12},"end":{"line":420,"column":5}},"80":{"start":{"line":406,"column":8},"end":{"line":406,"column":40}},"81":{"start":{"line":407,"column":8},"end":{"line":407,"column":46}},"82":{"start":{"line":409,"column":8},"end":{"line":411,"column":9}},"83":{"start":{"line":410,"column":12},"end":{"line":410,"column":20}},"84":{"start":{"line":413,"column":8},"end":{"line":415,"column":9}},"85":{"start":{"line":414,"column":12},"end":{"line":414,"column":23}},"86":{"start":{"line":417,"column":8},"end":{"line":417,"column":78}},"87":{"start":{"line":419,"column":8},"end":{"line":419,"column":20}},"88":{"start":{"line":430,"column":12},"end":{"line":446,"column":5}},"89":{"start":{"line":432,"column":8},"end":{"line":432,"column":42}},"90":{"start":{"line":433,"column":8},"end":{"line":433,"column":44}},"91":{"start":{"line":435,"column":8},"end":{"line":437,"column":9}},"92":{"start":{"line":436,"column":12},"end":{"line":436,"column":21}},"93":{"start":{"line":439,"column":8},"end":{"line":441,"column":9}},"94":{"start":{"line":440,"column":12},"end":{"line":440,"column":22}},"95":{"start":{"line":443,"column":8},"end":{"line":443,"column":77}},"96":{"start":{"line":445,"column":8},"end":{"line":445,"column":20}},"97":{"start":{"line":455,"column":4},"end":{"line":458,"column":5}},"98":{"start":{"line":465,"column":8},"end":{"line":465,"column":32}},"99":{"start":{"line":456,"column":8},"end":{"line":456,"column":38}},"100":{"start":{"line":457,"column":8},"end":{"line":457,"column":30}},"101":{"start":{"line":473,"column":4},"end":{"line":476,"column":5}},"102":{"start":{"line":483,"column":8},"end":{"line":483,"column":33}},"103":{"start":{"line":474,"column":8},"end":{"line":474,"column":40}},"104":{"start":{"line":475,"column":8},"end":{"line":475,"column":30}},"105":{"start":{"line":491,"column":4},"end":{"line":494,"column":5}},"106":{"start":{"line":501,"column":8},"end":{"line":501,"column":31}},"107":{"start":{"line":492,"column":8},"end":{"line":492,"column":36}},"108":{"start":{"line":493,"column":8},"end":{"line":493,"column":31}},"109":{"start":{"line":509,"column":4},"end":{"line":512,"column":5}},"110":{"start":{"line":519,"column":8},"end":{"line":519,"column":34}},"111":{"start":{"line":510,"column":8},"end":{"line":510,"column":42}},"112":{"start":{"line":511,"column":8},"end":{"line":511,"column":31}},"113":{"start":{"line":527,"column":4},"end":{"line":530,"column":5}},"114":{"start":{"line":537,"column":8},"end":{"line":537,"column":33}},"115":{"start":{"line":528,"column":8},"end":{"line":528,"column":37}},"116":{"start":{"line":529,"column":8},"end":{"line":529,"column":54}},"117":{"start":{"line":540,"column":0},"end":{"line":540,"column":1}},"118":{"start":{"line":15,"column":13},"end":{"line":540,"column":1}}},"fnMap":{"1":{"name":"(anonymous_8)","line":15,"loc":{"start":{"line":15,"column":0},"end":{"line":null,"column":-1}}},"2":{"name":"Base","line":127,"loc":{"start":{"line":127,"column":4},"end":{"line":127,"column":68}}},"3":{"name":"(anonymous_10)","line":161,"loc":{"start":{"line":161,"column":42},"end":{"line":null,"column":-1}}},"4":{"name":"(anonymous_11)","line":175,"loc":{"start":{"line":175,"column":4},"end":{"line":null,"column":-1}}},"5":{"name":"(anonymous_12)","line":188,"loc":{"start":{"line":188,"column":4},"end":{"line":null,"column":-1}}},"6":{"name":"(anonymous_13)","line":216,"loc":{"start":{"line":216,"column":4},"end":{"line":null,"column":-1}}},"7":{"name":"(anonymous_14)","line":242,"loc":{"start":{"line":242,"column":4},"end":{"line":null,"column":-1}}},"8":{"name":"(anonymous_15)","line":265,"loc":{"start":{"line":265,"column":4},"end":{"line":null,"column":-1}}},"9":{"name":"(anonymous_16)","line":282,"loc":{"start":{"line":282,"column":4},"end":{"line":null,"column":-1}}},"10":{"name":"(anonymous_17)","line":298,"loc":{"start":{"line":298,"column":4},"end":{"line":null,"column":-1}}},"11":{"name":"(anonymous_18)","line":321,"loc":{"start":{"line":321,"column":4},"end":{"line":null,"column":-1}}},"12":{"name":"(anonymous_19)","line":355,"loc":{"start":{"line":355,"column":4},"end":{"line":null,"column":-1}}},"13":{"name":"(anonymous_20)","line":382,"loc":{"start":{"line":382,"column":4},"end":{"line":null,"column":-1}}},"14":{"name":"(anonymous_21)","line":404,"loc":{"start":{"line":404,"column":4},"end":{"line":null,"column":-1}}},"15":{"name":"(anonymous_22)","line":430,"loc":{"start":{"line":430,"column":4},"end":{"line":null,"column":-1}}},"16":{"name":"(anonymous_23)","line":464,"loc":{"start":{"line":464,"column":4},"end":{"line":null,"column":-1}}},"17":{"name":"(anonymous_24)","line":455,"loc":{"start":{"line":455,"column":4},"end":{"line":455,"column":43}}},"18":{"name":"(anonymous_25)","line":482,"loc":{"start":{"line":482,"column":4},"end":{"line":null,"column":-1}}},"19":{"name":"(anonymous_26)","line":473,"loc":{"start":{"line":473,"column":4},"end":{"line":473,"column":45}}},"20":{"name":"(anonymous_27)","line":500,"loc":{"start":{"line":500,"column":4},"end":{"line":null,"column":-1}}},"21":{"name":"(anonymous_28)","line":491,"loc":{"start":{"line":491,"column":4},"end":{"line":491,"column":41}}},"22":{"name":"(anonymous_29)","line":518,"loc":{"start":{"line":518,"column":4},"end":{"line":null,"column":-1}}},"23":{"name":"(anonymous_30)","line":509,"loc":{"start":{"line":509,"column":4},"end":{"line":509,"column":47}}},"24":{"name":"(anonymous_31)","line":536,"loc":{"start":{"line":536,"column":4},"end":{"line":null,"column":-1}}},"25":{"name":"(anonymous_32)","line":527,"loc":{"start":{"line":527,"column":4},"end":{"line":527,"column":45}}}},"branchMap":{"1":{"line":1,"type":"cond-expr","locations":[{"start":{"line":1,"column":21},"end":{"line":null,"column":-1}},{"start":{"line":1,"column":21},"end":{"line":null,"column":-1}}]},"2":{"line":2,"type":"cond-expr","locations":[{"start":{"line":2,"column":12},"end":{"line":null,"column":-1}},{"start":{"line":2,"column":12},"end":{"line":null,"column":-1}}]},"3":{"line":409,"type":"if","locations":[{"start":{"line":409,"column":8},"end":{"line":409,"column":7}},{"start":{"line":409,"column":8},"end":{"line":409,"column":7}}]},"4":{"line":409,"type":"binary-expr","locations":[{"start":{"line":409,"column":12},"end":{"line":409,"column":38}},{"start":{"line":409,"column":42},"end":{"line":409,"column":49}}]},"5":{"line":413,"type":"if","locations":[{"start":{"line":413,"column":8},"end":{"line":413,"column":7}},{"start":{"line":413,"column":8},"end":{"line":413,"column":7}}]},"6":{"line":413,"type":"binary-expr","locations":[{"start":{"line":413,"column":12},"end":{"line":413,"column":41}},{"start":{"line":413,"column":45},"end":{"line":413,"column":55}}]},"7":{"line":435,"type":"if","locations":[{"start":{"line":435,"column":8},"end":{"line":435,"column":7}},{"start":{"line":435,"column":8},"end":{"line":435,"column":7}}]},"8":{"line":435,"type":"binary-expr","locations":[{"start":{"line":435,"column":12},"end":{"line":435,"column":39}},{"start":{"line":435,"column":43},"end":{"line":435,"column":51}}]},"9":{"line":439,"type":"if","locations":[{"start":{"line":439,"column":8},"end":{"line":439,"column":7}},{"start":{"line":439,"column":8},"end":{"line":439,"column":7}}]},"10":{"line":439,"type":"binary-expr","locations":[{"start":{"line":439,"column":12},"end":{"line":439,"column":40}},{"start":{"line":439,"column":44},"end":{"line":439,"column":53}}]}},"s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":46,"8":46,"9":46,"10":46,"11":46,"12":46,"13":46,"14":46,"15":46,"16":46,"17":46,"18":46,"19":46,"20":46,"21":46,"22":46,"23":191,"24":1,"25":96,"26":1,"27":83,"28":83,"29":83,"30":83,"31":83,"32":83,"33":1,"34":83,"35":83,"36":83,"37":83,"38":83,"39":83,"40":1,"41":83,"42":83,"43":83,"44":83,"45":83,"46":83,"47":1,"48":81,"49":81,"50":81,"51":1,"52":122,"53":122,"54":1,"55":83,"56":83,"57":83,"58":83,"59":83,"60":1,"61":106,"62":106,"63":106,"64":106,"65":106,"66":106,"67":106,"68":1,"69":83,"70":83,"71":83,"72":83,"73":83,"74":1,"75":191,"76":191,"77":96,"78":191,"79":1,"80":107,"81":107,"82":107,"83":0,"84":107,"85":46,"86":107,"87":107,"88":1,"89":92,"90":92,"91":92,"92":0,"93":92,"94":46,"95":92,"96":92,"97":1,"98":1369,"99":46,"100":46,"101":1,"102":636,"103":46,"104":46,"105":1,"106":1332,"107":46,"108":46,"109":1,"110":1108,"111":61,"112":61,"113":1,"114":1192,"115":46,"116":46,"117":1,"118":1},"b":{"1":[1,0],"2":[1,0],"3":[0,107],"4":[107,107],"5":[46,61],"6":[107,61],"7":[0,92],"8":[92,92],"9":[46,46],"10":[92,46]},"f":{"1":1,"2":46,"3":191,"4":96,"5":83,"6":83,"7":83,"8":81,"9":122,"10":83,"11":106,"12":83,"13":191,"14":107,"15":92,"16":1369,"17":46,"18":636,"19":46,"20":1332,"21":46,"22":1108,"23":61,"24":1192,"25":46},"code":"import 'crossfilter';\r\nimport 'd3';\r\n\r\n\r\nimport {ColorMap} from './colormap';\r\nimport {Legend} from './legend';\r\n\r\n\r\n/**\r\n * This is the base class for all punchcards. It provides the methods that are\r\n * shared between all punchcards, such as drawing of the vertical axis (which is\r\n * always hour of day), drawing of the background box, generation of the SVG DOM\r\n * element, and so on.\r\n */\r\nexport class Base {\r\n\r\n    /**\r\n     * The crossfilter that contains the data which needs to be visualized.\r\n     * @type {CrossFilter.CrossFilter<any>}\r\n     */\r\n    protected cf: CrossFilter.CrossFilter<any>;\r\n    /**\r\n     * The colormap: i.e. the element that determines what color is used to\r\n     * display a certain value.\r\n     * @type {ColorMap}\r\n     */\r\n    public colormap: ColorMap;\r\n    /**\r\n     * The user-defined dimensions that are used to manipulate the crossfilter\r\n     * data.\r\n     * @type {any}\r\n     */\r\n    protected dim: any;\r\n    /**\r\n     * The element of the DOM where the punchcard should be visualized.\r\n     * @type {HTMLElement}\r\n     */\r\n    public domElem: HTMLElement;\r\n    /**\r\n     * The element ID of the this._domElem object.\r\n     * @type {string}\r\n     */\r\n    protected domElemId: string;\r\n    /**\r\n     * The SVG DOM element that is used to draw a punchcard in.\r\n     * @type {any}\r\n     */\r\n    public svg: any;\r\n    /**\r\n     * The space in pixels between the left side of the axis background and\r\n     * edge of the SVG element.\r\n     * @type {number}\r\n     */\r\n    private _marginLeft: number;\r\n    /**\r\n     * The space in pixels between the right side of the  axis background and\r\n     * edge of the SVG element.\r\n     * @type {number}\r\n     */\r\n    private _marginRight: number;\r\n    /**\r\n     * The space in pixels between the top side of axis background and edge of\r\n     * the SVG element.\r\n     * @type {number}\r\n     */\r\n    private _marginTop: number;\r\n    /**\r\n     * The space in pixels between the bottom side of axis background and edge\r\n     * of the SVG element.\r\n     * @type {number}\r\n     */\r\n    private _marginBottom: number;\r\n    /**\r\n     * Text to use as title for the graph\r\n     * @type {string}\r\n     */\r\n    protected title: string;\r\n    /**\r\n     * Text to use as label for the horizontal axis\r\n     * @type {string}\r\n     */\r\n    protected xlabel: string;\r\n    /**\r\n     * Text to use as label for the vertical axis\r\n     * @type {string}\r\n     */\r\n    protected ylabel: string;\r\n    /**\r\n     * d3 time scale for the vertical axis\r\n     * @type {d3.scale.Linear<any, any>}\r\n     */\r\n    protected todScale: d3.scale.Linear<any, any>;\r\n    /**\r\n     * height of the axis\r\n     * @type {number}\r\n     */\r\n    protected height: number;\r\n    /**\r\n     * width in pixels that is occupied by the legend\r\n     * @type {number}\r\n     */\r\n    private _legendWidth: number;\r\n    /**\r\n     * Whether or not there is enough data defined to be able to draw anything.\r\n     * @type {boolean}\r\n     */\r\n    public canDraw: boolean;\r\n    /**\r\n     * Defines which key of your input data contains the datetime information\r\n     * based on which you want to create the symbols in the punchcard's body.\r\n     * The default value is 'datestr'\r\n     * @type {string}\r\n     */\r\n    public datekey:string;\r\n\r\n\n\r\n    /**\r\n     * Constructs an instance of Base when given a crossfilter object and the\r\n     * name of a DOM element to draw in.\r\n     * @param  {CrossFilter.CrossFilter<any>} cf Crossfilter object\r\n     * containing the data\r\n     * @param  {string} domElemId DOM element identifier for the div in which to\r\n     * draw the punchcard graph\r\n     * @return {[type]} Returns an instance of Base class\r\n     */\r\n    constructor (cf: CrossFilter.CrossFilter<any>, domElemId: string) {\r\n\n        // the crossfilter object\n        this.cf = cf;\n\n        // the name of the DOM element\n        this.domElemId = domElemId;\n\n        // the DOM element by ID\n        this.domElem = document.getElementById(this.domElemId);\n\n        // all the dimensions are collected into one object, dim, which is\n        // initialized here:\n        this.dim = {};\r\n\r\n        // can only draw stuff after user has defined some dimensions\r\n        this.canDraw = false;\r\n\r\n        // the margins around the graph body\n        this.marginLeft = 70;\n        this.marginRight = 30;\n        this.marginTop = 50;\n        this.marginBottom = 110;\n        this.legendWidth = 80;\n\n        this.ylabel = 'Time of day';\n        this.title = '';\n\n        this.datekey = 'datestr';\r\n        this.colormap = new ColorMap();\r\n\r\n\r\n        // beware: JavaScript magic happens here\n        let that:Base = this;\r\n        window.addEventListener('resize', function() {\r\n            that.onResize();\r\n        });\r\n    }\n\r\n\r\n\r\n\r\n    /**\r\n     * Placeholder method that does not do anything but needs to be here because\r\n     * it's called by .onResize(). This method should be overridden by classes\r\n     * that inherit from Base.\r\n     * @return {Base} return the (unchanged) instance of Base\r\n     */\r\n    public draw():Base {\r\n\r\n        // placeholder method to be overridden in classes that inherit from this class\r\n        return this;\r\n    }\r\n\n\n\n    /**\r\n     * Adds an SVG g element containing an SVG rect element with which to draw a\r\n     * border around the punchcard graph.\r\n     * @return {Base} returns a reference to the instance of Base\r\n     */\r\n    protected drawBox():Base {\r\n        //\n        let w :number = this.domElem.clientWidth - this.marginLeft - this.marginRight - this.legendWidth;\n        let h :number = this.domElem.clientHeight - this.marginTop - this.marginBottom;\n        let dx:number = this.marginLeft;\n        let dy:number = this.marginTop;\n\n\n        this.svg.append('g')\n            .attr('class', 'chartbody-box')\n            .attr('transform', 'translate(' + dx + ',' + dy + ')' )\n            .append('rect')\n                .attr('width', w)\n                .attr('height', h)\n                .attr('class', 'chartbody-box');\n\n        return this;\n    }\n\r\n\r\n\n    /**\r\n     * Appends an SVG g element containing an SVG rect, the size of which is\r\n     * determined by the size of the SVG element minus the margins on 4 sides,\r\n     * and minus the width taken up by the legend. The rect constitutes the\r\n     * background of the punchcard's axes.\r\n     * @return {Base} returns a reference to the instance of Base\r\n     */\r\n    protected drawChartBody():Base {\r\n        //\n        let w :number = this.domElem.clientWidth - this.marginLeft - this.marginRight - this.legendWidth;\n        let h :number = this.domElem.clientHeight - this.marginTop - this.marginBottom;\n        let dx:number = this.marginLeft;\n        let dy:number = this.marginTop;\n\n\n        this.svg.append('g')\n            .attr('class', 'chartbody')\n            .attr('transform', 'translate(' + dx + ',' + dy + ')' )\n            .append('rect')\n                .attr('width', w)\n                .attr('height', h)\n                .attr('class', 'chartbody');\n\n        return this;\n    }\n\n\n\n    /**\r\n     * Adds an SVG g element containing an SVG text element with which to label\r\n     * the horizontal axis.\r\n     * @return {Base} returns a reference to the instance of Base\r\n     */\r\n    protected drawHorizontalAxisLabel():Base {\r\n\n        let w :number = this.domElem.clientWidth - this.marginLeft - this.marginRight - this.legendWidth;\n        let h :number = this.domElem.clientHeight - this.marginTop - this.marginBottom;\n        let dx:number = this.marginLeft + 0.5 * w;\n        let dy:number = this.marginTop + h + 0.8 * this.marginBottom;\n\n        this.svg.append('g')\n            .attr('class', 'horizontal-axis-label')\n            .attr('transform', 'translate(' + dx + ',' + dy + ')')\n            .append('text')\n            .text(this.xlabel)\n            .attr('class', 'horizontal-axis-label');\n\n        return this;\n    }\n\n\n\n    /**\r\n     * Adds a Legend to the plot, while resizing the punchcard as necessary.\r\n     * @return {Base} returns a reference to the instance of Base\r\n     */\r\n    protected drawLegend():Base {\r\n        // draw the legend\n\n        let legend:Legend = new Legend(this);\r\n        legend.draw();\n\n\n        return this;\n    }\n\r\n\r\n\r\n    /**\r\n     * Adds an SVG element to the DOM, so that other methods you can do d3\r\n     * things with it later.\r\n     * @return {Base} returns a reference to the instance of Base\r\n     */\r\n    protected drawSvg():Base {\r\n\n        this.svg = d3.select(this.domElem).append('svg')\n            .attr('width', this.domElem.clientWidth)\n            .attr('height', this.domElem.clientHeight);\n\n        return this;\n    }\n\n\n\n    /**\r\n     * Adds an SVG g element containing an SVG text element representing the\r\n     * title of the punchcard graph.\r\n     * @return {Base} returns a reference to the instance of Base\r\n     */\r\n    protected drawTitle():Base {\r\n\n        let w :number = this.domElem.clientWidth - this.marginLeft - this.marginRight - this.legendWidth;\n        let dx:number = this.marginLeft + 0.5 * w;\n        let dy:number = 0.5 * this.marginTop;\n\n        this.svg.append('g')\n            .attr('class', 'title')\n            .attr('transform', 'translate(' + dx + ',' + dy + ')')\n            .append('text')\n            .text(this.title)\n            .attr('class', 'title');\n\n        return this;\n    }\n\n\n\n    /**\r\n     * Adds an SVG g element containing a d3.linear.axis representing the hour\r\n     * of day.\r\n     * @return {Base} returns a reference to the instance of Base\r\n     */\r\n    protected drawVerticalAxis():Base {\r\n        //\n        let dx:number = this.marginLeft;\n        let dy:number = this.domElem.clientHeight - this.marginBottom;\n        let h :number = this.domElem.clientHeight - this.marginTop - this.marginBottom;\n\n\n        this.todScale = d3.scale.linear()\n            .range([-h, 0])\n            .domain([0.0, 24.0]);\n\n        let todAxis = d3.svg.axis()\n            .orient('left')\n            .scale(this.todScale)\n            .tickValues([0, 3, 6, 9, 12, 15, 18, 21, 24])\n            .innerTickSize(5)\n            .outerTickSize(0);\n\n        this.svg.append('g')\n            .attr('class', 'vertical-axis')\n            .attr('transform', 'translate(' + dx + ',' + dy + ')' )\n            .call(todAxis);\n\n        return this;\n\n    }\n\n\n\n    /**\r\n     * Adds an SVG g element containing an SVG text element with which to label\r\n     * the vertical axis.\r\n     * @return {Base} returns a reference to the instance of Base\r\n     */\r\n    protected drawVerticalAxisLabel():Base {\r\n        //\n        let h :number = this.domElem.clientHeight - this.marginTop - this.marginBottom;\n        let dx:number = 0.3 * this.marginLeft;\n        let dy:number = this.marginTop + 0.5 * h;\n\n        this.svg.append('g')\n            .attr('class', 'vertical-axis-label')\n            .attr('transform', 'translate(' + dx + ',' + dy + ') rotate(-90)')\n            .append('text')\n            .text(this.ylabel)\n            .attr('class', 'vertical-axis-label');\n\n        return this;\n\n    }\n\n\n\n\r\n\n\n    /**\r\n     * When the window is resized, redraw the punchcard graph in its entirety,\r\n     * while observing the new maximum size.\r\n     * @return {[type]} [description]\r\n     */\r\n    protected onResize() {\n\r\n        // get the div element that we want to redraw\r\n        let div = this.domElem;\r\n\n        // delete the contents of the div\r\n        while (div.firstChild) {\r\n            div.removeChild(div.firstChild);\r\n        }\r\n\r\n        this.draw();\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Sets the CSS style min-height such that the body of the punchcard graph\r\n     * cannot become smaller than 100px in height, while taking into account the\r\n     * margins on the top and bottom of the graph.\r\n     * @return {Base} returns a reference to the instance of Base\r\n     */\r\n    private updateMinHeight():Base {\r\n\n        let top:number = this.marginTop;\n        let bottom:number = this.marginBottom;\n\n        if (typeof top === 'undefined' || top < 0) {\n            top = 0;\n        }\n\n        if (typeof bottom === 'undefined' || bottom < 0) {\n            bottom = 0;\n        }\n\n        this.domElem.style.minHeight = (top + bottom + 100).toString() + 'px';\n\n        return this;\n    }\n\n\n\n    /**\r\n     * Sets the CSS style min-width such that the body of the punchcard graph\r\n     * cannot become narrower than 100px, while taking into account the\r\n     * margins on the left and right of the graph.\r\n     * @return {Base} returns a reference to the instance of Base\r\n     */\r\n    private updateMinWidth():Base {\r\n\n        let left:number = this.marginLeft;\n        let right:number = this.marginRight;\n\n        if (typeof left === 'undefined' || left < 0) {\n            left = 0;\n        }\n\n        if (typeof right === 'undefined' || right < 0) {\n            right = 0;\n        }\n\n        this.domElem.style.minWidth = (left + right + 100).toString() + 'px';\n\n        return this;\n    }\n\n\n\n    /**\r\n     * [marginLeft description]\r\n     * @param  {number} marginLeft [description]\r\n     * @return {[type]}            [description]\r\n     */\r\n    public set marginLeft(marginLeft:number) {\n        this._marginLeft = marginLeft;\n        this.updateMinWidth();\n    }\n\r\n    /**\r\n     * [marginLeft description]\r\n     * @return {number} [description]\r\n     */\r\n    public get marginLeft():number {\n        return this._marginLeft;\n    }\n\r\n    /**\r\n     * [marginRight description]\r\n     * @param  {number} marginRight [description]\r\n     * @return {[type]}             [description]\r\n     */\r\n    public set marginRight(marginRight:number) {\n        this._marginRight = marginRight;\n        this.updateMinWidth();\n    }\r\n\r\n    /**\r\n     * [marginRight description]\r\n     * @return {number} [description]\r\n     */\r\n    public get marginRight():number {\r\n        return this._marginRight;\n    }\n\r\n    /**\r\n     * [marginTop description]\r\n     * @param  {number} marginTop [description]\r\n     * @return {[type]}           [description]\r\n     */\r\n    public set marginTop(marginTop:number) {\n        this._marginTop = marginTop;\n        this.updateMinHeight();\n    }\n\r\n    /**\r\n     * [marginTop description]\r\n     * @return {number} [description]\r\n     */\r\n    public get marginTop():number {\n        return this._marginTop;\n    }\n\r\n    /**\r\n     * [marginBottom description]\r\n     * @param  {number} marginBottom [description]\r\n     * @return {[type]}              [description]\r\n     */\r\n    public set marginBottom(marginBottom:number) {\n        this._marginBottom = marginBottom;\n        this.updateMinHeight();\n    }\r\n\r\n    /**\r\n     * [marginBottom description]\r\n     * @return {number} [description]\r\n     */\r\n    public get marginBottom():number {\r\n        return this._marginBottom;\n    }\n\r\n    /**\r\n     * [legendWidth description]\r\n     * @param  {number} legendWidth [description]\r\n     * @return {[type]}             [description]\r\n     */\r\n    public set legendWidth(legendWidth:number) {\r\n        let minimumWidth:number = 50;\r\n        this._legendWidth = Math.max(legendWidth, 50);\r\n    }\r\n\r\n    /**\r\n     * [legendWidth description]\r\n     * @return {number} [description]\r\n     */\r\n    public get legendWidth():number {\r\n        return this._legendWidth;\r\n    }\r\n\r\n}\r\n\n\n","l":{"1":1,"2":1,"5":1,"6":1,"15":1,"127":1,"130":46,"133":46,"136":46,"140":46,"143":46,"146":46,"147":46,"148":46,"149":46,"150":46,"152":46,"153":46,"155":46,"156":46,"160":46,"161":46,"162":191,"175":1,"178":96,"188":1,"190":83,"191":83,"192":83,"193":83,"196":83,"204":83,"216":1,"218":83,"219":83,"220":83,"221":83,"224":83,"232":83,"242":1,"244":83,"245":83,"246":83,"247":83,"249":83,"256":83,"265":1,"268":81,"269":81,"272":81,"282":1,"284":122,"288":122,"298":1,"300":83,"301":83,"302":83,"304":83,"311":83,"321":1,"323":106,"324":106,"325":106,"328":106,"332":106,"339":106,"344":106,"355":1,"357":83,"358":83,"359":83,"361":83,"368":83,"382":1,"385":191,"388":191,"389":96,"392":191,"404":1,"406":107,"407":107,"409":107,"410":0,"413":107,"414":46,"417":107,"419":107,"430":1,"432":92,"433":92,"435":92,"436":0,"439":92,"440":46,"443":92,"445":92,"455":1,"456":46,"457":46,"465":1369,"473":1,"474":46,"475":46,"483":636,"491":1,"492":46,"493":46,"501":1332,"509":1,"510":61,"511":61,"519":1108,"527":1,"528":46,"529":46,"537":1192,"540":1}},
"src/colormap.ts":{"path":"src/colormap.ts","statementMap":{"1":{"start":{"line":21,"column":0},"end":{"line":402,"column":1}},"2":{"start":{"line":68,"column":4},"end":{"line":104,"column":5}},"3":{"start":{"line":70,"column":8},"end":{"line":70,"column":24}},"4":{"start":{"line":71,"column":8},"end":{"line":71,"column":28}},"5":{"start":{"line":73,"column":8},"end":{"line":93,"column":9}},"6":{"start":{"line":75,"column":12},"end":{"line":75,"column":28}},"7":{"start":{"line":76,"column":12},"end":{"line":76,"column":47}},"8":{"start":{"line":78,"column":15},"end":{"line":93,"column":9}},"9":{"start":{"line":80,"column":12},"end":{"line":80,"column":28}},"10":{"start":{"line":81,"column":12},"end":{"line":81,"column":54}},"11":{"start":{"line":83,"column":15},"end":{"line":93,"column":9}},"12":{"start":{"line":85,"column":12},"end":{"line":85,"column":28}},"13":{"start":{"line":86,"column":12},"end":{"line":90,"column":13}},"14":{"start":{"line":87,"column":16},"end":{"line":87,"column":44}},"15":{"start":{"line":89,"column":16},"end":{"line":89,"column":66}},"16":{"start":{"line":92,"column":12},"end":{"line":92,"column":77}},"17":{"start":{"line":97,"column":8},"end":{"line":97,"column":48}},"18":{"start":{"line":100,"column":8},"end":{"line":100,"column":45}},"19":{"start":{"line":101,"column":8},"end":{"line":101,"column":45}},"20":{"start":{"line":102,"column":8},"end":{"line":102,"column":56}},"21":{"start":{"line":119,"column":12},"end":{"line":128,"column":5}},"22":{"start":{"line":121,"column":8},"end":{"line":127,"column":9}},"23":{"start":{"line":122,"column":12},"end":{"line":122,"column":22}},"24":{"start":{"line":123,"column":15},"end":{"line":127,"column":9}},"25":{"start":{"line":124,"column":12},"end":{"line":124,"column":21}},"26":{"start":{"line":126,"column":12},"end":{"line":126,"column":21}},"27":{"start":{"line":137,"column":14},"end":{"line":299,"column":5}},"28":{"start":{"line":139,"column":8},"end":{"line":139,"column":34}},"29":{"start":{"line":141,"column":8},"end":{"line":295,"column":9}},"30":{"start":{"line":143,"column":16},"end":{"line":143,"column":56}},"31":{"start":{"line":144,"column":16},"end":{"line":144,"column":22}},"32":{"start":{"line":147,"column":16},"end":{"line":164,"column":18}},"33":{"start":{"line":165,"column":16},"end":{"line":165,"column":22}},"34":{"start":{"line":168,"column":16},"end":{"line":177,"column":18}},"35":{"start":{"line":178,"column":16},"end":{"line":178,"column":22}},"36":{"start":{"line":181,"column":16},"end":{"line":198,"column":18}},"37":{"start":{"line":199,"column":16},"end":{"line":199,"column":22}},"38":{"start":{"line":202,"column":16},"end":{"line":219,"column":18}},"39":{"start":{"line":220,"column":16},"end":{"line":220,"column":22}},"40":{"start":{"line":223,"column":16},"end":{"line":240,"column":18}},"41":{"start":{"line":241,"column":16},"end":{"line":241,"column":22}},"42":{"start":{"line":244,"column":16},"end":{"line":289,"column":18}},"43":{"start":{"line":290,"column":16},"end":{"line":290,"column":22}},"44":{"start":{"line":293,"column":16},"end":{"line":293,"column":80}},"45":{"start":{"line":297,"column":8},"end":{"line":297,"column":26}},"46":{"start":{"line":312,"column":11},"end":{"line":352,"column":5}},"47":{"start":{"line":316,"column":8},"end":{"line":319,"column":9}},"48":{"start":{"line":317,"column":12},"end":{"line":317,"column":32}},"49":{"start":{"line":318,"column":12},"end":{"line":318,"column":33}},"50":{"start":{"line":321,"column":8},"end":{"line":321,"column":75}},"51":{"start":{"line":322,"column":8},"end":{"line":322,"column":45}},"52":{"start":{"line":324,"column":8},"end":{"line":324,"column":32}},"53":{"start":{"line":325,"column":8},"end":{"line":325,"column":32}},"54":{"start":{"line":327,"column":8},"end":{"line":335,"column":9}},"55":{"start":{"line":328,"column":12},"end":{"line":328,"column":62}},"56":{"start":{"line":329,"column":12},"end":{"line":329,"column":65}},"57":{"start":{"line":330,"column":12},"end":{"line":334,"column":13}},"58":{"start":{"line":331,"column":16},"end":{"line":331,"column":47}},"59":{"start":{"line":332,"column":16},"end":{"line":332,"column":51}},"60":{"start":{"line":333,"column":16},"end":{"line":333,"column":22}},"61":{"start":{"line":337,"column":8},"end":{"line":337,"column":74}},"62":{"start":{"line":338,"column":8},"end":{"line":343,"column":10}},"63":{"start":{"line":345,"column":8},"end":{"line":349,"column":9}},"64":{"start":{"line":345,"column":13},"end":{"line":345,"column":24}},"65":{"start":{"line":346,"column":12},"end":{"line":348,"column":13}},"66":{"start":{"line":347,"column":16},"end":{"line":347,"column":67}},"67":{"start":{"line":351,"column":8},"end":{"line":351,"column":24}},"68":{"start":{"line":362,"column":11},"end":{"line":367,"column":5}},"69":{"start":{"line":364,"column":8},"end":{"line":364,"column":43}},"70":{"start":{"line":365,"column":8},"end":{"line":365,"column":34}},"71":{"start":{"line":366,"column":8},"end":{"line":366,"column":73}},"72":{"start":{"line":376,"column":11},"end":{"line":382,"column":5}},"73":{"start":{"line":378,"column":8},"end":{"line":378,"column":36}},"74":{"start":{"line":379,"column":8},"end":{"line":379,"column":61}},"75":{"start":{"line":381,"column":8},"end":{"line":381,"column":20}},"76":{"start":{"line":389,"column":11},"end":{"line":397,"column":5}},"77":{"start":{"line":391,"column":8},"end":{"line":393,"column":9}},"78":{"start":{"line":391,"column":13},"end":{"line":391,"column":21}},"79":{"start":{"line":392,"column":12},"end":{"line":392,"column":39}},"80":{"start":{"line":394,"column":8},"end":{"line":394,"column":61}},"81":{"start":{"line":396,"column":8},"end":{"line":396,"column":20}},"82":{"start":{"line":44,"column":11},"end":{"line":61,"column":6}},"83":{"start":{"line":402,"column":0},"end":{"line":402,"column":1}},"84":{"start":{"line":21,"column":13},"end":{"line":402,"column":1}}},"fnMap":{"1":{"name":"(anonymous_34)","line":21,"loc":{"start":{"line":21,"column":0},"end":{"line":null,"column":-1}}},"2":{"name":"ColorMap","line":68,"loc":{"start":{"line":68,"column":4},"end":{"line":68,"column":46}}},"3":{"name":"(anonymous_36)","line":119,"loc":{"start":{"line":119,"column":4},"end":{"line":119,"column":54}}},"4":{"name":"(anonymous_37)","line":137,"loc":{"start":{"line":137,"column":4},"end":{"line":137,"column":44}}},"5":{"name":"(anonymous_38)","line":312,"loc":{"start":{"line":312,"column":4},"end":{"line":312,"column":29}}},"6":{"name":"(anonymous_39)","line":362,"loc":{"start":{"line":362,"column":4},"end":{"line":362,"column":32}}},"7":{"name":"(anonymous_40)","line":376,"loc":{"start":{"line":376,"column":4},"end":{"line":376,"column":41}}},"8":{"name":"(anonymous_41)","line":389,"loc":{"start":{"line":389,"column":4},"end":{"line":389,"column":38}}}},"branchMap":{"1":{"line":73,"type":"if","locations":[{"start":{"line":73,"column":8},"end":{"line":73,"column":7}},{"start":{"line":73,"column":8},"end":{"line":73,"column":7}}]},"2":{"line":78,"type":"if","locations":[{"start":{"line":78,"column":15},"end":{"line":78,"column":14}},{"start":{"line":78,"column":15},"end":{"line":78,"column":14}}]},"3":{"line":83,"type":"if","locations":[{"start":{"line":83,"column":15},"end":{"line":83,"column":14}},{"start":{"line":83,"column":15},"end":{"line":83,"column":14}}]},"4":{"line":121,"type":"if","locations":[{"start":{"line":121,"column":8},"end":{"line":121,"column":7}},{"start":{"line":121,"column":8},"end":{"line":121,"column":7}}]},"5":{"line":123,"type":"if","locations":[{"start":{"line":123,"column":15},"end":{"line":123,"column":14}},{"start":{"line":123,"column":15},"end":{"line":123,"column":14}}]},"6":{"line":142,"type":"switch","locations":[{"start":{"line":142,"column":12},"end":{"line":145,"column":13}},{"start":{"line":146,"column":12},"end":{"line":166,"column":13}},{"start":{"line":167,"column":12},"end":{"line":179,"column":13}},{"start":{"line":180,"column":12},"end":{"line":200,"column":13}},{"start":{"line":201,"column":12},"end":{"line":221,"column":13}},{"start":{"line":222,"column":12},"end":{"line":242,"column":13}},{"start":{"line":243,"column":12},"end":{"line":291,"column":13}},{"start":{"line":292,"column":12},"end":{"line":294,"column":13}}]},"7":{"line":316,"type":"if","locations":[{"start":{"line":316,"column":8},"end":{"line":316,"column":7}},{"start":{"line":316,"column":8},"end":{"line":316,"column":7}}]},"8":{"line":330,"type":"if","locations":[{"start":{"line":330,"column":12},"end":{"line":330,"column":11}},{"start":{"line":330,"column":12},"end":{"line":330,"column":11}}]},"9":{"line":330,"type":"binary-expr","locations":[{"start":{"line":330,"column":16},"end":{"line":330,"column":21}},{"start":{"line":330,"column":25},"end":{"line":330,"column":30}}]},"10":{"line":346,"type":"if","locations":[{"start":{"line":346,"column":12},"end":{"line":346,"column":11}},{"start":{"line":346,"column":12},"end":{"line":346,"column":11}}]},"11":{"line":346,"type":"binary-expr","locations":[{"start":{"line":346,"column":16},"end":{"line":346,"column":27}},{"start":{"line":346,"column":31},"end":{"line":346,"column":44}}]}},"s":{"1":1,"2":1,"3":101,"4":101,"5":101,"6":47,"7":47,"8":54,"9":52,"10":52,"11":2,"12":1,"13":1,"14":1,"15":0,"16":1,"17":100,"18":100,"19":100,"20":100,"21":1,"22":700,"23":3,"24":697,"25":697,"26":0,"27":1,"28":99,"29":99,"30":64,"31":64,"32":3,"33":3,"34":1,"35":1,"36":0,"37":0,"38":8,"39":8,"40":15,"41":15,"42":8,"43":8,"44":0,"45":99,"46":1,"47":16287,"48":46,"49":46,"50":16287,"51":16287,"52":16287,"53":16287,"54":16287,"55":53715,"56":53715,"57":53715,"58":16287,"59":16287,"60":16287,"61":16287,"62":16287,"63":16287,"64":65148,"65":65148,"66":0,"67":16287,"68":1,"69":16287,"70":16287,"71":16287,"72":1,"73":1,"74":1,"75":1,"76":1,"77":1,"78":2,"79":2,"80":1,"81":1,"82":1,"83":1,"84":1},"b":{"1":[47,54],"2":[52,2],"3":[1,1],"4":[3,697],"5":[697,0],"6":[64,3,1,0,8,15,8,0],"7":[46,16241],"8":[16287,37428],"9":[53715,53715],"10":[0,65148],"11":[65148,65148]},"f":{"1":1,"2":101,"3":700,"4":99,"5":16287,"6":16287,"7":1,"8":1},"code":"\n/**\r\n * Associates a point in the domain space to a color\r\n * @type {Object}\r\n */\r\ntype ColorTableItem = {\n    at   : number;\n    color: [number, number, number];\n}\n\r\n/**\r\n * An array of ColorTableItems\r\n * @type {[type]}\r\n */\r\ntype ColorTable = Array<ColorTableItem>;\r\n\n/**\r\n * ColorMap helps you associate values from the domain to rgba color values,\r\n * where each channel is in the range [0,255]\r\n */\r\nexport class ColorMap {\r\n\r\n    /**\r\n     * Array of ColorTableItems, where each ColorTableItem associates a point\r\n     * along the domain's number line to an rgba color.\r\n     * @type {ColorTable}\r\n     */\r\n    public colortable: ColorTable;\r\n    /**\r\n     * Domain value assocatiated with the lowest color from the ColorMap.\r\n     * @type {number}\r\n     */\r\n    public cLimLow: number;\r\n    /**\r\n     * Domain value assocatiated with the highest color from the ColorMap.\r\n     * @type {number}\r\n     */\r\n    public cLimHigh: number;\r\n    /**\r\n     * if the user does not specify which ColorMap she wants to use,\r\n     * defaultColorTable is what she'll get.\r\n     * @type {ColorTable}\r\n     */\r\n    static defaultColorTable:ColorTable = [\n        {\n            at: Number.NEGATIVE_INFINITY,\n            color: [255, 255, 255, 255]\n        },\n        {\n            at: 0.0,\n            color: [8, 106, 227, 0]\n        },\n        {\n            at: 1.0,\n            color: [227, 8, 88, 0]\n        },\n        {\n            at: Number.POSITIVE_INFINITY,\n            color: [255, 255, 255, 255]\n        }\n    ];\n\n    /**\r\n     * [constructor description]\r\n     * @param  {ColorTable|string} colortable [description]\r\n     * @return {[type]}                       [description]\r\n     */\r\n    constructor (colortable?:ColorTable|string) {\n\n        let str: string;\n        let ct : ColorTable;\r\n\r\n        if (typeof colortable === 'undefined') {\r\n\r\n            str = 'default';\r\n            ct = this.expandColorTableStr(str);\n\n        } else if (typeof colortable === 'string') {\n\r\n            str = undefined;\r\n            ct = this.expandColorTableStr(colortable);\n\n        } else if (typeof colortable === 'object') {\r\n\r\n            str = undefined;\r\n            try {\r\n                ct = <ColorTable>colortable;\r\n            } catch (Error) {\r\n                throw new Error('Can\\'t cast to ColorTable type');\r\n            }\r\n        } else {\r\n            throw new Error('Undefined behavior for these input arguments.');\r\n        }\r\n\n        // use my own compare function to sort the array based on the value of\n        // each element's 'at' property:\n        this.colortable = ct.sort(this.compare);\n\n        // adjust the color limits\n        let nColors = this.colortable.length;\n        this.cLimLow = this.colortable[1].at;\n        this.cLimHigh = this.colortable[nColors - 2].at;\n\n    }\n\n\n    /**\r\n     * comparison function to help sort the ColorTableItems that make\r\n     * up a ColorTable. Basically when comparing objects, you have to specify\r\n     * which key you want to compare/sort on, which for this function is the\r\n     * value of a ColorTableItem's 'at' key.\r\n     * @param  {ColorTableItem} a the first ColorTableItem (left hand side\r\n     * member of the comparison)\r\n     * @param  {ColorTableItem} b the second ColorTableItem (right hand side\r\n     * of the comparison)\r\n     * @return {number} number identifying how a nd b compare. Returns -1 when\r\n     * a<b, 1 when a>b, or 0 when a==b\r\n     */\r\n    private compare(a:ColorTableItem, b:ColorTableItem):number {\n\n        if (a.at < b.at) {\n            return -1;\n        } else if (a.at > b.at) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n\n    /**\r\n     * Returns a ColorTable based on an input string\r\n     * @param  {string} input string, e.g. 'default', 'gray', 'empty',\r\n     * 'autumn', 'blues', 'summer', 'rainbow'\r\n     * @return {ColorTable} The ColorTable associated with the input string\r\n     */\r\n    protected expandColorTableStr(str:string):ColorTable {\r\n\n        let colortable:ColorTable;\n\n        switch (str) {\n            case 'default': {\n                colortable = ColorMap.defaultColorTable;\r\n                break;\n            }\n            case 'gray': {\n                colortable = [\n                    {\n                        at: Number.NEGATIVE_INFINITY,\n                        color: [0, 0, 0, 255]\n                    },\n                    {\n                        at: 0.0,\n                        color: [0, 0, 0, 0]\n                    },\n                    {\n                        at: 1.0,\n                        color: [255, 255, 255, 0]\n                    },\n                    {\n                        at: Number.POSITIVE_INFINITY,\n                        color: [255, 255, 255, 255]\n                    }\n                ];\n                break;\r\n            }\n            case 'empty': {\n                colortable = [\n                    {\n                        at: Number.NEGATIVE_INFINITY,\n                        color: [0, 0, 0, 255]\n                    },\n                    {\n                        at: Number.POSITIVE_INFINITY,\n                        color: [255, 255, 255, 255]\n                    }\n                ];\n                break;\n            }\n            case 'autumn': {\n                colortable = [\n                    {\n                        at: Number.NEGATIVE_INFINITY,\n                        color: [0, 0, 0, 255]\n                    },\n                    {\n                        at: 0.0,\n                        color: [255, 0, 0, 0]\n                    },\n                    {\n                        at: 1.0,\n                        color: [255, 255, 0, 0]\n                    },\n                    {\n                        at: Number.POSITIVE_INFINITY,\n                        color: [255, 255, 255, 255]\n                    }\n                ];\n                break;\n            }\n            case 'blues': {\n                colortable = [\n                    {\n                        at: Number.NEGATIVE_INFINITY,\n                        color: [0, 0, 0, 255]\n                    },\n                    {\n                        at: 0.0,\n                        color: [0, 0, 255, 0]\n                    },\n                    {\n                        at: 1.0,\n                        color: [0, 255, 255, 0]\n                    },\n                    {\n                        at: Number.POSITIVE_INFINITY,\n                        color: [255, 255, 255, 255]\n                    }\n                ];\n                break;\n            }\n            case 'summer': {\n                colortable = [\n                    {\n                        at: Number.NEGATIVE_INFINITY,\n                        color: [0, 0, 0, 255]\n                    },\n                    {\n                        at: 0.0,\n                        color: [8, 160, 120, 0]\n                    },\n                    {\n                        at: 1.0,\n                        color: [252, 252, 42, 0]\n                    },\n                    {\n                        at: Number.POSITIVE_INFINITY,\n                        color: [255, 255, 255, 255]\n                    }\n                ];\n                break;\n            }\n            case 'rainbow': {\n                colortable = [\n                    {\n                        at:Number.NEGATIVE_INFINITY,\n                        color: [255, 255,   0,  0]\n                    },\n                    {\n                        at:0.000,\n                        color: [255, 255,   0,  0]\n                    },\n                    {\n                        at:0.125,\n                        color: [255, 255,   0,  0]\n                    },\n                    {\n                        at:0.250,\n                        color: [145, 255,   0,  0]\n                    },\n                    {\n                        at:0.375,\n                        color: [  0, 255,  54,  0]\n                    },\n                    {\n                        at:0.500,\n                        color: [  0, 179, 255,  0]\n                    },\n                    {\n                        at:0.625,\n                        color: [ 10,   0, 255,  0]\n                    },\n                    {\n                        at:0.750,\n                        color: [171,   0, 255,  0]\n                    },\n                    {\n                        at:0.875,\n                        color: [255,   0, 159,  0]\n                    },\n                    {\n                        at:1.000,\n                        color: [255,  89,   0,  0]\n                    },\n                    {\n                        at:Number.POSITIVE_INFINITY,\n                        color: [255,  89,   0,  0]\n                    }\n                ];\n                break;\n            }\n            default: {\n                throw new Error('ColorMap.expandColorTableStr(): unknown case');\n            }\n        }\n\n        return colortable;\n\n    }\n\n\n\n    /**\r\n     * Returns an rgba color array based on the current colormap (including the\r\n     * domain values at the upper and lower boundaries of the ColorMap) and an\r\n     * input domain value. The color values are determined by linear\r\n     * interpolation between the known color values, as defined by the ColorMap.\r\n     * @param  {number} at Value for which you want to know the associated color\r\n     * @return {[type]} 4-D vector containing rgba value of the color, with 0\r\n     * represetning zero intensity and 255 full intensity.\r\n     */\r\n    public getColor(at:number):[number, number, number, number] {\r\n\n        // if there is only one value in the range, lower the lower limit and\r\n        // raise the upper limit\r\n        if (this.cLimLow === this.cLimHigh) {\n            this.cLimLow -= 0.5;\n            this.cLimHigh += 0.5;\n        }\n\n        let atUnity = (at - this.cLimLow) / (this.cLimHigh - this.cLimLow);\n        let nColors = this.colortable.length;\n\n        let prev:ColorTableItem;\r\n        let next:ColorTableItem;\r\n\n        for (let iColor = 0; iColor < nColors; iColor++) {\n            let cond1 = this.colortable[iColor].at <= atUnity;\n            let cond2 = atUnity < this.colortable[iColor + 1].at;\n            if (cond1 && cond2) {\n                prev = this.colortable[iColor];\n                next = this.colortable[iColor + 1];\n                break;\n            }\n        }\n\n        let atRelative:number = (atUnity - prev.at) / (next.at - prev.at);\n        let theColor: [number, number, number, number] = [\n            Math.floor(prev.color[0] + (next.color[0] - prev.color[0]) * atRelative),\n            Math.floor(prev.color[1] + (next.color[1] - prev.color[1]) * atRelative),\n            Math.floor(prev.color[2] + (next.color[2] - prev.color[2]) * atRelative),\n            255\n        ];\n\n        for (let channel of theColor) {\n            if (channel < 0 || channel > 255) {\n                throw new Error('Calculated color out of bounds.');\n            }\n        }\n\n        return theColor;\n    }\n\n\n\n    /**\r\n     * CSS string representation of the result returned by ColorMap.getColor().\r\n     * Note that the string does not include a transparency value.\r\n     * @param  {number} at Value for which you want to know the associated color.\r\n     * @return {string} CSS string representing the rgb color.\r\n     */\r\n    public getColorRGB(at:number):string {\n\n        let color:[number, number, number];\n        color = this.getColor(at);\n        return 'rgb(' + color[0] + ',' + color[1] + ',' + color[2] + ')';\n    }\n\n\n\n    /**\r\n     * Add a ColorTableItem to the current ColorMap\r\n     * @param  {ColorTableItem} color Color to add, with linkage to domain value.\r\n     * @return {ColorMap} Updated ColorMap\r\n     */\r\n    public addColor(color: ColorTableItem): ColorMap {\r\n\n        this.colortable.push(color);\n        this.colortable = this.colortable.sort(this.compare);\n\n        return this;\n    }\n\r\n    /**\r\n     * Add multiple ColorTableItems to the ColorMap\r\n     * @param  {ColorTable} colors Colors to add to the ColorMap\r\n     * @return {ColorMap} Updated Colormap\r\n     */\r\n    public addColors(colors:ColorTable): ColorMap {\r\n\n        for (let elem of colors) {\n            this.colortable.push(elem);\n        }\n        this.colortable = this.colortable.sort(this.compare);\n\n        return this;\n    }\n\n\n\r\n\r\n}","l":{"21":1,"44":1,"68":1,"70":101,"71":101,"73":101,"75":47,"76":47,"78":54,"80":52,"81":52,"83":2,"85":1,"86":1,"87":1,"89":0,"92":1,"97":100,"100":100,"101":100,"102":100,"119":1,"121":700,"122":3,"123":697,"124":697,"126":0,"137":1,"139":99,"141":99,"143":64,"144":64,"147":3,"165":3,"168":1,"178":1,"181":0,"199":0,"202":8,"220":8,"223":15,"241":15,"244":8,"290":8,"293":0,"297":99,"312":1,"316":16287,"317":46,"318":46,"321":16287,"322":16287,"324":16287,"325":16287,"327":16287,"328":53715,"329":53715,"330":53715,"331":16287,"332":16287,"333":16287,"337":16287,"338":16287,"345":65148,"346":65148,"347":0,"351":16287,"362":1,"364":16287,"365":16287,"366":16287,"376":1,"378":1,"379":1,"381":1,"389":1,"391":2,"392":2,"394":1,"396":1,"402":1}},
"src/date-circle.ts":{"path":"src/date-circle.ts","statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":21}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":12}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":16}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":36}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":37}},"6":{"start":{"line":11,"column":0},"end":{"line":103,"column":1}},"7":{"start":{"line":11,"column":32},"end":{"line":11,"column":40}},"8":{"start":{"line":14,"column":4},"end":{"line":21,"column":5}},"9":{"start":{"line":16,"column":8},"end":{"line":16,"column":29}},"10":{"start":{"line":18,"column":8},"end":{"line":18,"column":25}},"11":{"start":{"line":19,"column":8},"end":{"line":19,"column":40}},"12":{"start":{"line":20,"column":8},"end":{"line":20,"column":48}},"13":{"start":{"line":26,"column":14},"end":{"line":100,"column":5}},"14":{"start":{"line":29,"column":8},"end":{"line":29,"column":35}},"15":{"start":{"line":31,"column":8},"end":{"line":31,"column":105}},"16":{"start":{"line":32,"column":8},"end":{"line":32,"column":87}},"17":{"start":{"line":33,"column":8},"end":{"line":33,"column":40}},"18":{"start":{"line":34,"column":8},"end":{"line":34,"column":43}},"19":{"start":{"line":35,"column":8},"end":{"line":35,"column":65}},"20":{"start":{"line":36,"column":8},"end":{"line":36,"column":89}},"21":{"start":{"line":38,"column":8},"end":{"line":38,"column":85}},"22":{"start":{"line":39,"column":8},"end":{"line":39,"column":84}},"23":{"start":{"line":40,"column":8},"end":{"line":40,"column":67}},"24":{"start":{"line":45,"column":8},"end":{"line":45,"column":54}},"25":{"start":{"line":46,"column":8},"end":{"line":49,"column":11}},"26":{"start":{"line":48,"column":12},"end":{"line":48,"column":38}},"27":{"start":{"line":50,"column":8},"end":{"line":50,"column":35}},"28":{"start":{"line":55,"column":8},"end":{"line":55,"column":46}},"29":{"start":{"line":56,"column":8},"end":{"line":56,"column":47}},"30":{"start":{"line":57,"column":8},"end":{"line":64,"column":9}},"31":{"start":{"line":57,"column":13},"end":{"line":57,"column":21}},"32":{"start":{"line":58,"column":12},"end":{"line":60,"column":13}},"33":{"start":{"line":59,"column":16},"end":{"line":59,"column":36}},"34":{"start":{"line":61,"column":12},"end":{"line":63,"column":13}},"35":{"start":{"line":62,"column":16},"end":{"line":62,"column":37}},"36":{"start":{"line":65,"column":8},"end":{"line":65,"column":39}},"37":{"start":{"line":66,"column":8},"end":{"line":66,"column":41}},"38":{"start":{"line":70,"column":8},"end":{"line":96,"column":23}},"39":{"start":{"line":80,"column":24},"end":{"line":80,"column":77}},"40":{"start":{"line":83,"column":24},"end":{"line":83,"column":114}},"41":{"start":{"line":86,"column":24},"end":{"line":86,"column":75}},"42":{"start":{"line":87,"column":24},"end":{"line":87,"column":90}},"43":{"start":{"line":88,"column":24},"end":{"line":92,"column":25}},"44":{"start":{"line":89,"column":28},"end":{"line":89,"column":50}},"45":{"start":{"line":91,"column":28},"end":{"line":91,"column":66}},"46":{"start":{"line":95,"column":24},"end":{"line":95,"column":66}},"47":{"start":{"line":98,"column":8},"end":{"line":98,"column":20}},"48":{"start":{"line":103,"column":0},"end":{"line":103,"column":1}},"49":{"start":{"line":11,"column":13},"end":{"line":103,"column":1}}},"fnMap":{"1":{"name":"(anonymous_46)","line":11,"loc":{"start":{"line":11,"column":0},"end":{"line":null,"column":-1}}},"2":{"name":"DateCircle","line":14,"loc":{"start":{"line":14,"column":4},"end":{"line":14,"column":68}}},"3":{"name":"(anonymous_48)","line":26,"loc":{"start":{"line":26,"column":4},"end":{"line":null,"column":-1}}},"4":{"name":"(anonymous_49)","line":46,"loc":{"start":{"line":46,"column":28},"end":{"line":46,"column":42}}},"5":{"name":"(anonymous_50)","line":79,"loc":{"start":{"line":79,"column":32},"end":{"line":79,"column":46}}},"6":{"name":"(anonymous_51)","line":82,"loc":{"start":{"line":82,"column":32},"end":{"line":82,"column":46}}},"7":{"name":"(anonymous_52)","line":85,"loc":{"start":{"line":85,"column":31},"end":{"line":85,"column":45}}},"8":{"name":"(anonymous_53)","line":94,"loc":{"start":{"line":94,"column":34},"end":{"line":94,"column":48}}}},"branchMap":{"1":{"line":1,"type":"cond-expr","locations":[{"start":{"line":1,"column":21},"end":{"line":null,"column":-1}},{"start":{"line":1,"column":21},"end":{"line":null,"column":-1}}]},"2":{"line":2,"type":"cond-expr","locations":[{"start":{"line":2,"column":12},"end":{"line":null,"column":-1}},{"start":{"line":2,"column":12},"end":{"line":null,"column":-1}}]},"3":{"line":3,"type":"cond-expr","locations":[{"start":{"line":3,"column":16},"end":{"line":null,"column":-1}},{"start":{"line":3,"column":16},"end":{"line":null,"column":-1}}]},"4":{"line":58,"type":"if","locations":[{"start":{"line":58,"column":12},"end":{"line":58,"column":11}},{"start":{"line":58,"column":12},"end":{"line":58,"column":11}}]},"5":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":12},"end":{"line":61,"column":11}},{"start":{"line":61,"column":12},"end":{"line":61,"column":11}}]},"6":{"line":88,"type":"if","locations":[{"start":{"line":88,"column":24},"end":{"line":88,"column":23}},{"start":{"line":88,"column":24},"end":{"line":88,"column":23}}]}},"s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":8,"10":8,"11":8,"12":8,"13":1,"14":40,"15":40,"16":40,"17":40,"18":40,"19":40,"20":40,"21":40,"22":40,"23":40,"24":40,"25":40,"26":1702,"27":40,"28":40,"29":40,"30":40,"31":1702,"32":1702,"33":112,"34":1702,"35":142,"36":40,"37":40,"38":40,"39":1702,"40":1702,"41":1702,"42":1702,"43":1702,"44":22,"45":1680,"46":1702,"47":40,"48":1,"49":1},"b":{"1":[1,0],"2":[1,0],"3":[1,0],"4":[112,1590],"5":[142,1560],"6":[22,1680]},"f":{"1":1,"2":8,"3":40,"4":1702,"5":1702,"6":1702,"7":1702,"8":1702},"code":"import 'crossfilter';\r\nimport 'd3';\r\nimport 'moment';\r\n\r\n\r\nimport {ColorMap} from './colormap';\r\nimport {DateRect} from './date-rect';\r\n\r\n\r\n\nexport class DateCircle extends DateRect {\r\n\n\n    constructor (cf: CrossFilter.CrossFilter<any>, domElemId: string) {\r\n\n        super(cf, domElemId);\r\n\r\n        this.xlabel = '';\n        this.title = 'DateCircle title';\r\n        this.colormap = new ColorMap('rainbow');\r\n    }\n\n\n\n\n    protected drawSymbols():DateCircle {\r\n\n        // capture the this object\n        let that:DateCircle = this;\r\n\n        let w :number = this.domElem.clientWidth - this.marginLeft - this.marginRight - this.legendWidth;\n        let h :number = this.domElem.clientHeight - this.marginTop - this.marginBottom;\n        let dx:number = this.marginLeft;\n        let dy:number = this.marginTop + h;\n        let symbolMargin = {left:0, right: 0, top: 0, bottom: 0}; // pixels\n        let wDays:number = moment(this.dateTo).diff(moment(this.dateFrom), 'days', true);\n\n        let symbolWidth :number = w / wDays - symbolMargin.left - symbolMargin.right;\n        let symbolHeight:number = h / 24.0 - symbolMargin.top - symbolMargin.bottom;\n        let r:number = Math.min(symbolWidth, symbolHeight) / 2 - 2;\n\n        // based on example from\n        // http://stackoverflow.com/questions/16766986/is-it-possible-to-group-by-multiple-dimensions-in-crossfilter\n        // forEach method could be very expensive on write.\n        let group = this.dim.dateAndHourOfDay.group();\n        group.all().forEach(function(d:any) {\r\n            //parse the json string created above\n            d.key = JSON.parse(d.key);\n        });\n        let data:any = group.all();\n\n\n        // determine the min and max in the count in order to set the color\n        // limits on the colormap later\n        let lowest = Number.POSITIVE_INFINITY;\n        let highest = Number.NEGATIVE_INFINITY;\n        for (let elem of data) {\n            if (elem.value < lowest) {\n                lowest = elem.value;\n            }\n            if (elem.value > highest) {\n                highest = elem.value;\n            }\n        }\n        this.colormap.cLimLow = lowest;\n        this.colormap.cLimHigh = highest;\n\n\n        // draw the circles\r\n        this.svg\n            .append('g')\n            .attr('class', 'symbol')\n            .attr('transform', 'translate(' + dx + ',' + dy + ')')\n            .selectAll('circle.symbol')\n                .data(data)\n                .enter()\n                .append('circle')\n                    .attr('class', 'symbol')\n                    .attr('cx', function(d:any){\r\n                        return that.dateScale(new Date(d.key[that.datekey]));\r\n                        })\n                    .attr('cy', function(d:any){\r\n                        return that.todScale(parseInt(d.key.hourOfDay, 10)) + symbolMargin.top + symbolHeight / 2;\n                    })\n                    .attr('r', function(d:any) {\r\n                        let numer:number = d.value - that.colormap.cLimLow;\r\n                        let denom:number = that.colormap.cLimHigh - that.colormap.cLimLow;\r\n                        if (denom === 0) {\r\n                            return Math.max(r, 1);\r\n                        } else {\r\n                            return Math.max(r * numer / denom, 1);\r\n                        }\r\n                    })\r\n                    .attr('fill', function(d:any){\r\n                        return that.colormap.getColorRGB(d.value);\n                    });\n\n        return this;\n\n    }\n\n\n}\n\n\n","l":{"1":1,"2":1,"3":1,"6":1,"7":1,"11":1,"14":1,"16":8,"18":8,"19":8,"20":8,"26":1,"29":40,"31":40,"32":40,"33":40,"34":40,"35":40,"36":40,"38":40,"39":40,"40":40,"45":40,"46":40,"48":1702,"50":40,"55":40,"56":40,"57":1702,"58":1702,"59":112,"61":1702,"62":142,"65":40,"66":40,"70":40,"80":1702,"83":1702,"86":1702,"87":1702,"88":1702,"89":22,"91":1680,"95":1702,"98":40,"103":1}},
"src/date-rect.ts":{"path":"src/date-rect.ts","statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":21}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":12}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":16}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":28}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":36}},"6":{"start":{"line":10,"column":0},"end":{"line":239,"column":1}},"7":{"start":{"line":10,"column":30},"end":{"line":10,"column":34}},"8":{"start":{"line":24,"column":4},"end":{"line":32,"column":5}},"9":{"start":{"line":26,"column":8},"end":{"line":26,"column":29}},"10":{"start":{"line":28,"column":8},"end":{"line":28,"column":25}},"11":{"start":{"line":29,"column":8},"end":{"line":29,"column":38}},"12":{"start":{"line":30,"column":8},"end":{"line":30,"column":48}},"13":{"start":{"line":41,"column":11},"end":{"line":58,"column":5}},"14":{"start":{"line":44,"column":8},"end":{"line":44,"column":33}},"15":{"start":{"line":48,"column":8},"end":{"line":55,"column":11}},"16":{"start":{"line":49,"column":12},"end":{"line":49,"column":58}},"17":{"start":{"line":51,"column":12},"end":{"line":54,"column":15}},"18":{"start":{"line":56,"column":8},"end":{"line":56,"column":28}},"19":{"start":{"line":57,"column":8},"end":{"line":57,"column":20}},"20":{"start":{"line":78,"column":11},"end":{"line":100,"column":5}},"21":{"start":{"line":80,"column":8},"end":{"line":99,"column":9}},"22":{"start":{"line":82,"column":12},"end":{"line":82,"column":24}},"23":{"start":{"line":85,"column":12},"end":{"line":97,"column":13}},"24":{"start":{"line":87,"column":16},"end":{"line":87,"column":32}},"25":{"start":{"line":88,"column":16},"end":{"line":88,"column":38}},"26":{"start":{"line":89,"column":16},"end":{"line":89,"column":42}},"27":{"start":{"line":90,"column":16},"end":{"line":90,"column":48}},"28":{"start":{"line":91,"column":16},"end":{"line":91,"column":41}},"29":{"start":{"line":92,"column":16},"end":{"line":92,"column":46}},"30":{"start":{"line":93,"column":16},"end":{"line":93,"column":34}},"31":{"start":{"line":94,"column":16},"end":{"line":94,"column":35}},"32":{"start":{"line":95,"column":16},"end":{"line":95,"column":32}},"33":{"start":{"line":96,"column":16},"end":{"line":96,"column":35}},"34":{"start":{"line":98,"column":12},"end":{"line":98,"column":24}},"35":{"start":{"line":109,"column":12},"end":{"line":159,"column":5}},"36":{"start":{"line":111,"column":8},"end":{"line":111,"column":105}},"37":{"start":{"line":112,"column":8},"end":{"line":112,"column":40}},"38":{"start":{"line":113,"column":8},"end":{"line":113,"column":70}},"39":{"start":{"line":115,"column":8},"end":{"line":115,"column":93}},"40":{"start":{"line":116,"column":8},"end":{"line":116,"column":131}},"41":{"start":{"line":118,"column":8},"end":{"line":118,"column":89}},"42":{"start":{"line":119,"column":8},"end":{"line":119,"column":131}},"43":{"start":{"line":121,"column":8},"end":{"line":121,"column":38}},"44":{"start":{"line":122,"column":8},"end":{"line":122,"column":32}},"45":{"start":{"line":123,"column":8},"end":{"line":123,"column":95}},"46":{"start":{"line":125,"column":8},"end":{"line":131,"column":9}},"47":{"start":{"line":126,"column":12},"end":{"line":126,"column":57}},"48":{"start":{"line":127,"column":12},"end":{"line":127,"column":22}},"49":{"start":{"line":129,"column":12},"end":{"line":129,"column":57}},"50":{"start":{"line":130,"column":12},"end":{"line":130,"column":33}},"51":{"start":{"line":133,"column":8},"end":{"line":136,"column":35}},"52":{"start":{"line":138,"column":8},"end":{"line":142,"column":36}},"53":{"start":{"line":144,"column":8},"end":{"line":147,"column":28}},"54":{"start":{"line":150,"column":8},"end":{"line":155,"column":45}},"55":{"start":{"line":157,"column":8},"end":{"line":157,"column":20}},"56":{"start":{"line":170,"column":14},"end":{"line":236,"column":5}},"57":{"start":{"line":173,"column":8},"end":{"line":173,"column":33}},"58":{"start":{"line":175,"column":8},"end":{"line":175,"column":105}},"59":{"start":{"line":176,"column":8},"end":{"line":176,"column":87}},"60":{"start":{"line":177,"column":8},"end":{"line":177,"column":40}},"61":{"start":{"line":178,"column":8},"end":{"line":178,"column":43}},"62":{"start":{"line":179,"column":8},"end":{"line":179,"column":65}},"63":{"start":{"line":180,"column":8},"end":{"line":180,"column":89}},"64":{"start":{"line":182,"column":8},"end":{"line":182,"column":85}},"65":{"start":{"line":183,"column":8},"end":{"line":183,"column":84}},"66":{"start":{"line":188,"column":8},"end":{"line":188,"column":54}},"67":{"start":{"line":189,"column":8},"end":{"line":192,"column":11}},"68":{"start":{"line":191,"column":12},"end":{"line":191,"column":38}},"69":{"start":{"line":193,"column":8},"end":{"line":193,"column":35}},"70":{"start":{"line":198,"column":8},"end":{"line":198,"column":46}},"71":{"start":{"line":199,"column":8},"end":{"line":199,"column":47}},"72":{"start":{"line":200,"column":8},"end":{"line":207,"column":9}},"73":{"start":{"line":200,"column":13},"end":{"line":200,"column":21}},"74":{"start":{"line":201,"column":12},"end":{"line":203,"column":13}},"75":{"start":{"line":202,"column":16},"end":{"line":202,"column":36}},"76":{"start":{"line":204,"column":12},"end":{"line":206,"column":13}},"77":{"start":{"line":205,"column":16},"end":{"line":205,"column":37}},"78":{"start":{"line":208,"column":8},"end":{"line":208,"column":39}},"79":{"start":{"line":209,"column":8},"end":{"line":209,"column":41}},"80":{"start":{"line":213,"column":8},"end":{"line":232,"column":23}},"81":{"start":{"line":223,"column":24},"end":{"line":223,"column":77}},"82":{"start":{"line":226,"column":24},"end":{"line":226,"column":76}},"83":{"start":{"line":231,"column":24},"end":{"line":231,"column":66}},"84":{"start":{"line":234,"column":8},"end":{"line":234,"column":20}},"85":{"start":{"line":239,"column":0},"end":{"line":239,"column":1}},"86":{"start":{"line":10,"column":13},"end":{"line":239,"column":1}}},"fnMap":{"1":{"name":"(anonymous_58)","line":10,"loc":{"start":{"line":10,"column":0},"end":{"line":null,"column":-1}}},"2":{"name":"DateRect","line":24,"loc":{"start":{"line":24,"column":4},"end":{"line":24,"column":68}}},"3":{"name":"(anonymous_60)","line":41,"loc":{"start":{"line":41,"column":4},"end":{"line":null,"column":-1}}},"4":{"name":"(anonymous_61)","line":48,"loc":{"start":{"line":48,"column":54},"end":{"line":48,"column":69}}},"5":{"name":"(anonymous_62)","line":78,"loc":{"start":{"line":78,"column":4},"end":{"line":null,"column":-1}}},"6":{"name":"(anonymous_63)","line":109,"loc":{"start":{"line":109,"column":4},"end":{"line":null,"column":-1}}},"7":{"name":"(anonymous_64)","line":170,"loc":{"start":{"line":170,"column":4},"end":{"line":null,"column":-1}}},"8":{"name":"(anonymous_65)","line":189,"loc":{"start":{"line":189,"column":28},"end":{"line":189,"column":42}}},"9":{"name":"(anonymous_66)","line":222,"loc":{"start":{"line":222,"column":31},"end":{"line":222,"column":45}}},"10":{"name":"(anonymous_67)","line":225,"loc":{"start":{"line":225,"column":31},"end":{"line":225,"column":45}}},"11":{"name":"(anonymous_68)","line":230,"loc":{"start":{"line":230,"column":34},"end":{"line":230,"column":48}}}},"branchMap":{"1":{"line":1,"type":"cond-expr","locations":[{"start":{"line":1,"column":21},"end":{"line":null,"column":-1}},{"start":{"line":1,"column":21},"end":{"line":null,"column":-1}}]},"2":{"line":2,"type":"cond-expr","locations":[{"start":{"line":2,"column":12},"end":{"line":null,"column":-1}},{"start":{"line":2,"column":12},"end":{"line":null,"column":-1}}]},"3":{"line":3,"type":"cond-expr","locations":[{"start":{"line":3,"column":16},"end":{"line":null,"column":-1}},{"start":{"line":3,"column":16},"end":{"line":null,"column":-1}}]},"4":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":8},"end":{"line":80,"column":7}},{"start":{"line":80,"column":8},"end":{"line":80,"column":7}}]},"5":{"line":85,"type":"if","locations":[{"start":{"line":85,"column":12},"end":{"line":85,"column":11}},{"start":{"line":85,"column":12},"end":{"line":85,"column":11}}]},"6":{"line":125,"type":"if","locations":[{"start":{"line":125,"column":8},"end":{"line":125,"column":7}},{"start":{"line":125,"column":8},"end":{"line":125,"column":7}}]},"7":{"line":201,"type":"if","locations":[{"start":{"line":201,"column":12},"end":{"line":201,"column":11}},{"start":{"line":201,"column":12},"end":{"line":201,"column":11}}]},"8":{"line":204,"type":"if","locations":[{"start":{"line":204,"column":12},"end":{"line":204,"column":11}},{"start":{"line":204,"column":12},"end":{"line":204,"column":11}}]}},"s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":15,"10":15,"11":15,"12":15,"13":1,"14":13,"15":13,"16":25012,"17":25012,"18":13,"19":13,"20":1,"21":64,"22":0,"23":64,"24":55,"25":55,"26":55,"27":55,"28":55,"29":55,"30":55,"31":55,"32":55,"33":55,"34":64,"35":1,"36":68,"37":68,"38":68,"39":68,"40":68,"41":68,"42":68,"43":68,"44":68,"45":68,"46":68,"47":27,"48":27,"49":41,"50":41,"51":68,"52":68,"53":68,"54":68,"55":68,"56":1,"57":27,"58":27,"59":27,"60":27,"61":27,"62":27,"63":27,"64":27,"65":27,"66":27,"67":27,"68":1964,"69":27,"70":27,"71":27,"72":27,"73":1964,"74":1964,"75":111,"76":1964,"77":144,"78":27,"79":27,"80":27,"81":1964,"82":1964,"83":1964,"84":27,"85":1,"86":1},"b":{"1":[1,0],"2":[1,0],"3":[1,0],"4":[0,64],"5":[55,9],"6":[27,41],"7":[111,1853],"8":[144,1820]},"f":{"1":1,"2":15,"3":13,"4":25012,"5":64,"6":68,"7":27,"8":1964,"9":1964,"10":1964,"11":1964},"code":"import 'crossfilter';\r\nimport 'd3';\r\nimport 'moment';\r\n\r\n\r\nimport {Base} from './base';\r\nimport {ColorMap} from './colormap';\r\n\r\n\nexport class DateRect extends Base {\r\n\n    protected dateScale: d3.time.Scale<any, any>;\r\n    protected dateFrom: Date;\r\n    protected dateTo: Date;\r\n\n\r\n    /**\r\n     * Constructor method for DateRect\r\n     * @param  {CrossFilter.CrossFilter<any>} cf Crossfilter object\r\n     * containing the data.\r\n     * @param  {string} domElemId name of the DOM element to draw in.\r\n     * @return {[type]} A reference to an instance of DateRect.\r\n     */\r\n    constructor (cf: CrossFilter.CrossFilter<any>, domElemId: string) {\r\n\n        super(cf, domElemId);\n\n        this.xlabel = '';\n        this.title = 'DateRect title';\r\n        this.colormap = new ColorMap('default');\r\n\r\n    }\n\n\n\n\n    /**\r\n     * Defines the crossfilter dimensions as used by this class\r\n     * @return {Base} A reference to an instance of DateRect.\r\n     */\r\n    public defineDimensions():Base {\r\n\r\n        // store a reference to the instance\r\n        let that:DateRect = this;\r\n\r\n        // based on example from\r\n        // http://stackoverflow.com/questions/16766986/is-it-possible-to-group-by-multiple-dimensions-in-crossfilter\r\n        this.dim.dateAndHourOfDay = this.cf.dimension(function (d:any) {\r\n            let m:moment.Moment = moment(d[that.datekey]);\r\n            //stringify() and later, parse() to get keyed objects\r\n            return JSON.stringify({\r\n                datestr: m.format('YYYY-MM-DD'),\r\n                hourOfDay: m.hour()\r\n            });\r\n        });\r\n        this.canDraw = true;\r\n        return this;\r\n    }\r\n\r\n\r\n\r\n\r\n    /**\r\n     * This method defines which other methods to call in order to create\r\n     * a punchcard graph with the date on the horizontal axis and the time of\r\n     * day on the vertical axis. Mostly calls methods of the parent class, Base,\r\n     * but for example the symbols for this class are SVG rects, so it calls its\r\n     * own method .drawSymbols() for that.\r\n     *\r\n     * Successful drawing depends on whether the container is currently visible,\r\n     * and whether there is enough information in the instance to draw anything\r\n     * at all.\r\n     *\r\n     * This method overrides stub method in parent class.\r\n     *\r\n     * @return {DateRect} A reference to an instance of DateRect.\r\n     */\r\n    public draw():DateRect {\r\n\n        if (this.domElem.classList.contains('hidden')) {\n            // div is hidden\n            return this;\n        } else {\r\n            // div is visible\r\n            if (this.canDraw) {\r\n                // dimensions have been defined\r\n                super.drawSvg();\r\n                super.drawChartBody();\r\n                this.drawHorizontalAxis();\r\n                super.drawHorizontalAxisLabel();\r\n                super.drawVerticalAxis();\r\n                super.drawVerticalAxisLabel();\r\n                super.drawTitle();\r\n                this.drawSymbols();\r\n                super.drawBox();\r\n                super.drawLegend();\r\n            }\r\n            return this;\r\n        }\n    }\n\n\n\n    /**\r\n     * Adds an SVG g element containing a horizontal d3.time.scale axis to the\r\n     * DOM, representing the date.\r\n     * @return {DateRect} A reference to an instance of DateRect.\r\n     */\r\n    private drawHorizontalAxis():DateRect {\r\n\n        let w :number = this.domElem.clientWidth - this.marginLeft - this.marginRight - this.legendWidth;\n        let dx:number = this.marginLeft;\n        let dy:number = this.domElem.clientHeight - this.marginBottom;\n\n        let firstResultDate = new Date(this.dim.dateAndHourOfDay.bottom(1)[0][this.datekey]);\r\n        this.dateFrom = new Date(firstResultDate.getFullYear(), firstResultDate.getMonth(), firstResultDate.getDate(), 0, 0, 0, 0);\n\n        let lastResultDate = new Date(this.dim.dateAndHourOfDay.top(1)[0][this.datekey]);\r\n        this.dateTo = new Date(lastResultDate.getFullYear(), lastResultDate.getMonth(), lastResultDate.getDate(), 23, 59, 59, 999);\n\n        let tickFormat:d3.time.Format;\r\n        let ticks: number | any; // FIXME second type should be Date[] but that doesn't work somehow\r\n        let nHoursDiff: number = moment(this.dateTo).diff(moment(this.dateFrom), 'hour', true);\n\n        if (nHoursDiff > 5 * 24) {\n            tickFormat = d3.time.format('%a %b %-d, %Y');\n            ticks = 7;\n        } else {\n            tickFormat = d3.time.format('%a %b %-d, %Y');\n            ticks = d3.time.days;\r\n        };\n\n        this.dateScale = d3.time.scale()\n            .range([0, w])\n            .domain([this.dateFrom,\n                     this.dateTo]);\n\n        let dateAxis = d3.svg.axis()\n            .orient('bottom')\n            .scale(this.dateScale)\n            .ticks(ticks)\n            .tickFormat(tickFormat);\n\n        this.svg.append('g')\n            .attr('class', 'horizontal-axis')\n            .attr('transform', 'translate(' + dx + ',' + dy + ')' )\n            .call(dateAxis);\n\n        // doing style stuff in JavaScript is considered bad practice...:\n        this.svg.select('.horizontal-axis')\n            .selectAll('text')\n                .attr('x', -10)\n                .attr('y', 0)\n                .attr('dy', '.35em')\n                .style('text-anchor', 'end');\n\n        return this;\n\n    }\n\n\n\n    /**\r\n     * This method adds an SVG g element with many SVG rects in it. Each rect\r\n     * represents the count of how many data rows fall within the area covered\r\n     * by the rect, where the horizontal boundaries dictate the date range and\r\n     * the vertical boundaries dictate the time of day range.\r\n     * @return {DateRect} A reference to the instance of DateRect.\r\n     */\r\n    protected drawSymbols():DateRect {\r\n\n        // capture the this object\n        let that:DateRect = this;\r\n\n        let w :number = this.domElem.clientWidth - this.marginLeft - this.marginRight - this.legendWidth;\n        let h :number = this.domElem.clientHeight - this.marginTop - this.marginBottom;\n        let dx:number = this.marginLeft;\n        let dy:number = this.marginTop + h;\n        let symbolMargin = {left:0, right: 0, top: 0, bottom: 0}; // pixels\n        let wDays:number = moment(this.dateTo).diff(moment(this.dateFrom), 'days', true);\n\n        let symbolWidth :number = w / wDays - symbolMargin.left - symbolMargin.right;\n        let symbolHeight:number = h / 24.0 - symbolMargin.top - symbolMargin.bottom;\n\n        // based on example from\n        // http://stackoverflow.com/questions/16766986/is-it-possible-to-group-by-multiple-dimensions-in-crossfilter\n        // forEach method could be very expensive on write.\n        let group = this.dim.dateAndHourOfDay.group();\n        group.all().forEach(function(d:any) {\r\n            //parse the json string created above\n            d.key = JSON.parse(d.key);\n        });\n        let data:any = group.all();\n\n\n        // determine the min and max in the count in order to set the color\n        // limits on the colormap later\n        let lowest = Number.POSITIVE_INFINITY;\n        let highest = Number.NEGATIVE_INFINITY;\n        for (let elem of data) {\n            if (elem.value < lowest) {\n                lowest = elem.value;\n            }\n            if (elem.value > highest) {\n                highest = elem.value;\n            }\n        }\n        this.colormap.cLimLow = lowest;\n        this.colormap.cLimHigh = highest;\n\n\n        // draw the rects\n        this.svg\n            .append('g')\n            .attr('class', 'symbol')\n            .attr('transform', 'translate(' + dx + ',' + dy + ')')\n            .selectAll('rect.symbol')\n                .data(data)\n                .enter()\n                .append('rect')\n                    .attr('class', 'symbol')\n                    .attr('x', function(d:any){\r\n                        return that.dateScale(new Date(d.key[that.datekey]));\r\n                        })\n                    .attr('y', function(d:any){\r\n                        return that.todScale(parseInt(d.key.hourOfDay, 10));\n                    })\n                    .attr('width', symbolWidth)\n                    .attr('height', symbolHeight)\n                    .attr('fill', function(d:any){\r\n                        return that.colormap.getColorRGB(d.value);\n                    });\n\n        return this;\n\n    }\n\r\n\n}\n\n\n","l":{"1":1,"2":1,"3":1,"6":1,"7":1,"10":1,"24":1,"26":15,"28":15,"29":15,"30":15,"41":1,"44":13,"48":13,"49":25012,"51":25012,"56":13,"57":13,"78":1,"80":64,"82":0,"85":64,"87":55,"88":55,"89":55,"90":55,"91":55,"92":55,"93":55,"94":55,"95":55,"96":55,"98":64,"109":1,"111":68,"112":68,"113":68,"115":68,"116":68,"118":68,"119":68,"121":68,"122":68,"123":68,"125":68,"126":27,"127":27,"129":41,"130":41,"133":68,"138":68,"144":68,"150":68,"157":68,"170":1,"173":27,"175":27,"176":27,"177":27,"178":27,"179":27,"180":27,"182":27,"183":27,"188":27,"189":27,"191":1964,"193":27,"198":27,"199":27,"200":1964,"201":1964,"202":111,"204":1964,"205":144,"208":27,"209":27,"213":27,"223":1964,"226":1964,"231":1964,"234":27,"239":1}},
"src/legend.ts":{"path":"src/legend.ts","statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":12}},"2":{"start":{"line":20,"column":0},"end":{"line":389,"column":1}},"3":{"start":{"line":84,"column":4},"end":{"line":100,"column":5}},"4":{"start":{"line":86,"column":8},"end":{"line":86,"column":31}},"5":{"start":{"line":89,"column":8},"end":{"line":89,"column":28}},"6":{"start":{"line":90,"column":8},"end":{"line":90,"column":30}},"7":{"start":{"line":91,"column":8},"end":{"line":91,"column":48}},"8":{"start":{"line":92,"column":8},"end":{"line":92,"column":54}},"9":{"start":{"line":94,"column":8},"end":{"line":94,"column":83}},"10":{"start":{"line":95,"column":8},"end":{"line":95,"column":93}},"11":{"start":{"line":97,"column":8},"end":{"line":97,"column":24}},"12":{"start":{"line":98,"column":8},"end":{"line":98,"column":25}},"13":{"start":{"line":109,"column":11},"end":{"line":121,"column":5}},"14":{"start":{"line":112,"column":8},"end":{"line":112,"column":30}},"15":{"start":{"line":113,"column":8},"end":{"line":113,"column":34}},"16":{"start":{"line":114,"column":8},"end":{"line":114,"column":32}},"17":{"start":{"line":115,"column":8},"end":{"line":115,"column":37}},"18":{"start":{"line":116,"column":8},"end":{"line":116,"column":25}},"19":{"start":{"line":117,"column":8},"end":{"line":117,"column":27}},"20":{"start":{"line":118,"column":8},"end":{"line":118,"column":23}},"21":{"start":{"line":120,"column":8},"end":{"line":120,"column":20}},"22":{"start":{"line":129,"column":14},"end":{"line":144,"column":5}},"23":{"start":{"line":132,"column":8},"end":{"line":132,"column":102}},"24":{"start":{"line":133,"column":8},"end":{"line":133,"column":39}},"25":{"start":{"line":135,"column":8},"end":{"line":141,"column":56}},"26":{"start":{"line":143,"column":8},"end":{"line":143,"column":20}},"27":{"start":{"line":152,"column":12},"end":{"line":168,"column":5}},"28":{"start":{"line":154,"column":8},"end":{"line":154,"column":102}},"29":{"start":{"line":155,"column":8},"end":{"line":155,"column":78}},"30":{"start":{"line":157,"column":8},"end":{"line":160,"column":22}},"31":{"start":{"line":162,"column":8},"end":{"line":164,"column":68}},"32":{"start":{"line":166,"column":8},"end":{"line":166,"column":20}},"33":{"start":{"line":176,"column":14},"end":{"line":191,"column":5}},"34":{"start":{"line":178,"column":8},"end":{"line":178,"column":102}},"35":{"start":{"line":179,"column":8},"end":{"line":179,"column":92}},"36":{"start":{"line":182,"column":8},"end":{"line":188,"column":52}},"37":{"start":{"line":190,"column":8},"end":{"line":190,"column":20}},"38":{"start":{"line":200,"column":14},"end":{"line":240,"column":5}},"39":{"start":{"line":203,"column":8},"end":{"line":203,"column":31}},"40":{"start":{"line":205,"column":8},"end":{"line":205,"column":102}},"41":{"start":{"line":206,"column":8},"end":{"line":206,"column":78}},"42":{"start":{"line":208,"column":8},"end":{"line":208,"column":27}},"43":{"start":{"line":209,"column":8},"end":{"line":209,"column":32}},"44":{"start":{"line":210,"column":8},"end":{"line":215,"column":9}},"45":{"start":{"line":211,"column":12},"end":{"line":214,"column":19}},"46":{"start":{"line":217,"column":8},"end":{"line":217,"column":56}},"47":{"start":{"line":220,"column":8},"end":{"line":237,"column":23}},"48":{"start":{"line":231,"column":24},"end":{"line":231,"column":80}},"49":{"start":{"line":236,"column":24},"end":{"line":236,"column":74}},"50":{"start":{"line":239,"column":8},"end":{"line":239,"column":20}},"51":{"start":{"line":248,"column":14},"end":{"line":261,"column":5}},"52":{"start":{"line":250,"column":8},"end":{"line":250,"column":121}},"53":{"start":{"line":251,"column":8},"end":{"line":251,"column":44}},"54":{"start":{"line":253,"column":8},"end":{"line":258,"column":36}},"55":{"start":{"line":260,"column":8},"end":{"line":260,"column":20}},"56":{"start":{"line":270,"column":14},"end":{"line":294,"column":5}},"57":{"start":{"line":272,"column":8},"end":{"line":272,"column":86}},"58":{"start":{"line":273,"column":8},"end":{"line":273,"column":95}},"59":{"start":{"line":274,"column":8},"end":{"line":274,"column":106}},"60":{"start":{"line":275,"column":8},"end":{"line":275,"column":78}},"61":{"start":{"line":277,"column":8},"end":{"line":279,"column":85}},"62":{"start":{"line":281,"column":8},"end":{"line":285,"column":30}},"63":{"start":{"line":287,"column":8},"end":{"line":290,"column":32}},"64":{"start":{"line":292,"column":8},"end":{"line":292,"column":20}},"65":{"start":{"line":302,"column":14},"end":{"line":317,"column":5}},"66":{"start":{"line":304,"column":8},"end":{"line":304,"column":95}},"67":{"start":{"line":305,"column":8},"end":{"line":305,"column":81}},"68":{"start":{"line":306,"column":8},"end":{"line":306,"column":49}},"69":{"start":{"line":308,"column":8},"end":{"line":313,"column":57}},"70":{"start":{"line":315,"column":8},"end":{"line":315,"column":20}},"71":{"start":{"line":326,"column":4},"end":{"line":328,"column":5}},"72":{"start":{"line":335,"column":8},"end":{"line":335,"column":32}},"73":{"start":{"line":327,"column":8},"end":{"line":327,"column":51}},"74":{"start":{"line":343,"column":4},"end":{"line":345,"column":5}},"75":{"start":{"line":352,"column":8},"end":{"line":352,"column":33}},"76":{"start":{"line":344,"column":8},"end":{"line":344,"column":53}},"77":{"start":{"line":360,"column":4},"end":{"line":362,"column":5}},"78":{"start":{"line":369,"column":8},"end":{"line":369,"column":31}},"79":{"start":{"line":361,"column":8},"end":{"line":361,"column":70}},"80":{"start":{"line":377,"column":4},"end":{"line":379,"column":5}},"81":{"start":{"line":386,"column":8},"end":{"line":386,"column":34}},"82":{"start":{"line":378,"column":8},"end":{"line":378,"column":79}},"83":{"start":{"line":389,"column":0},"end":{"line":389,"column":1}},"84":{"start":{"line":20,"column":13},"end":{"line":389,"column":1}}},"fnMap":{"1":{"name":"(anonymous_71)","line":20,"loc":{"start":{"line":20,"column":0},"end":{"line":null,"column":-1}}},"2":{"name":"Legend","line":84,"loc":{"start":{"line":84,"column":4},"end":{"line":84,"column":47}}},"3":{"name":"(anonymous_73)","line":109,"loc":{"start":{"line":109,"column":4},"end":{"line":null,"column":-1}}},"4":{"name":"(anonymous_74)","line":129,"loc":{"start":{"line":129,"column":4},"end":{"line":null,"column":-1}}},"5":{"name":"(anonymous_75)","line":152,"loc":{"start":{"line":152,"column":4},"end":{"line":null,"column":-1}}},"6":{"name":"(anonymous_76)","line":176,"loc":{"start":{"line":176,"column":4},"end":{"line":null,"column":-1}}},"7":{"name":"(anonymous_77)","line":200,"loc":{"start":{"line":200,"column":4},"end":{"line":null,"column":-1}}},"8":{"name":"(anonymous_78)","line":230,"loc":{"start":{"line":230,"column":31},"end":{"line":230,"column":45}}},"9":{"name":"(anonymous_79)","line":235,"loc":{"start":{"line":235,"column":34},"end":{"line":235,"column":48}}},"10":{"name":"(anonymous_80)","line":248,"loc":{"start":{"line":248,"column":4},"end":{"line":null,"column":-1}}},"11":{"name":"(anonymous_81)","line":270,"loc":{"start":{"line":270,"column":4},"end":{"line":null,"column":-1}}},"12":{"name":"(anonymous_82)","line":302,"loc":{"start":{"line":302,"column":4},"end":{"line":null,"column":-1}}},"13":{"name":"(anonymous_83)","line":334,"loc":{"start":{"line":334,"column":4},"end":{"line":null,"column":-1}}},"14":{"name":"(anonymous_84)","line":326,"loc":{"start":{"line":326,"column":4},"end":{"line":326,"column":46}}},"15":{"name":"(anonymous_85)","line":351,"loc":{"start":{"line":351,"column":4},"end":{"line":null,"column":-1}}},"16":{"name":"(anonymous_86)","line":343,"loc":{"start":{"line":343,"column":4},"end":{"line":343,"column":48}}},"17":{"name":"(anonymous_87)","line":368,"loc":{"start":{"line":368,"column":4},"end":{"line":null,"column":-1}}},"18":{"name":"(anonymous_88)","line":360,"loc":{"start":{"line":360,"column":4},"end":{"line":360,"column":44}}},"19":{"name":"(anonymous_89)","line":385,"loc":{"start":{"line":385,"column":4},"end":{"line":null,"column":-1}}},"20":{"name":"(anonymous_90)","line":377,"loc":{"start":{"line":377,"column":4},"end":{"line":377,"column":50}}}},"branchMap":{"1":{"line":2,"type":"cond-expr","locations":[{"start":{"line":2,"column":12},"end":{"line":null,"column":-1}},{"start":{"line":2,"column":12},"end":{"line":null,"column":-1}}]}},"s":{"1":1,"2":1,"3":1,"4":81,"5":81,"6":81,"7":81,"8":81,"9":81,"10":81,"11":81,"12":81,"13":1,"14":81,"15":81,"16":81,"17":81,"18":81,"19":81,"20":81,"21":81,"22":1,"23":81,"24":81,"25":81,"26":81,"27":1,"28":81,"29":81,"30":81,"31":81,"32":81,"33":1,"34":81,"35":81,"36":81,"37":81,"38":1,"39":81,"40":81,"41":81,"42":81,"43":81,"44":81,"45":10368,"46":81,"47":81,"48":10368,"49":10368,"50":81,"51":1,"52":81,"53":81,"54":81,"55":81,"56":1,"57":81,"58":81,"59":81,"60":81,"61":81,"62":81,"63":81,"64":81,"65":1,"66":81,"67":81,"68":81,"69":81,"70":81,"71":1,"72":648,"73":81,"74":1,"75":243,"76":81,"77":1,"78":486,"79":81,"80":1,"81":567,"82":81,"83":1,"84":1},"b":{"1":[1,0]},"f":{"1":1,"2":81,"3":81,"4":81,"5":81,"6":81,"7":81,"8":10368,"9":10368,"10":81,"11":81,"12":81,"13":648,"14":81,"15":243,"16":81,"17":486,"18":81,"19":567,"20":81},"code":"\r\nimport 'd3';\r\n\r\nimport {Base} from './base';\r\nimport {DateCircle} from './date-circle';\r\nimport {DateRect} from './date-rect';\r\nimport {WeekdayCircle} from './weekday-circle';\r\nimport {WeekdayRect} from './weekday-rect';\r\n\r\n/**\r\n * Convenience type/collection of various punchcards\r\n  */\r\ntype PunchcardVisualization = Base|DateCircle|DateRect|\r\n                                    WeekdayCircle|WeekdayRect;\r\n\n/**\r\n * Legend adds a legend to an existing PunchcardVisualization, indicating which\r\n * color represents which domain value.\r\n */\r\nexport class Legend {\r\n\r\n    /**\r\n     * Margin in pixels to the left of the legend\r\n     * @type {number}\r\n     */\r\n    private _marginLeft: number;\r\n    /**\r\n     * Margin in pixels to the right of the legend\r\n     * @type {number}\r\n     */\r\n    private _marginRight: number;\r\n    /**\r\n     * Margin in pixels to the top of the legend\r\n     * @type {number}\r\n     */\r\n    private _marginTop: number;\r\n    /**\r\n     * Margin in pixels to the bottom of the legend\r\n     * @type {number}\r\n     */\r\n    private _marginBottom: number;\r\n    /**\r\n     * The Legend's sibling, i.e. the object that the legend is associated with.\r\n     * @type {PunchcardVisualization}\r\n     */\r\n    protected sibling: PunchcardVisualization;\r\n    /**\r\n     * The title of the Legend\r\n     * @type {string}\r\n     */\r\n    protected title: string;\r\n    /**\r\n     * Text to label the Legend's vertical axis\r\n     * @type {string}\r\n     */\r\n    protected ylabel: string;\r\n    /**\r\n     * The legend's horizontal axis scale\r\n     * @type {any}\r\n     */\r\n    protected horizontalScale: any;\r\n    /**\r\n     * The Legend's vertical axis scale\r\n     * @type {any}\r\n     */\r\n    protected verticalScale: any;\r\n    /**\r\n     * The Legend's width in pixels\r\n     * @type {number}\r\n     */\r\n    protected width: number;\r\n    /**\r\n     * The Legend's height in pixels\r\n     * @type {number}\r\n     */\r\n    protected height: number;\r\n\r\n    /**\r\n     * Adds a legend to an existing PunchcardVisualization.\r\n     * @param  {PunchcardVisualization} sibling The sibling element, for which\r\n     * a legend needs to be constructed\r\n     * @return {[type]} A reference to the instance of Legend\r\n     */\r\n    constructor (sibling:PunchcardVisualization) {\n\n        this.sibling = sibling;\n\n        // the margins around the legend body\n        this.marginLeft = 0;\n        this.marginRight = 60;\n        this.marginTop = this.sibling.marginTop;\n        this.marginBottom = this.sibling.marginBottom;\n\n        this.width = this.sibling.legendWidth - this.marginLeft - this.marginRight;\n        this.height = this.sibling.domElem.clientHeight - this.marginTop - this.marginBottom;\n\n        this.title = '';\n        this.ylabel = '';\n\n    }\n\n\n\n    /**\r\n     * This method calls the other methods in a predefined succession, so that\r\n     * the whole legend gets drawn\r\n     * @return {Legend} Returns a reference to the instance of Legend\r\n     */\r\n    public draw(): Legend {\r\n        // draw the legend\n\n        this.drawLegendBody();\n        this.drawHorizontalAxis();\n        this.drawVerticalAxis();\n        this.drawVerticalAxisLabel();\n        this.drawTitle();\n        this.drawSymbols();\n        this.drawBox();\n\n        return this;\n    }\n\n\n\n    /**\r\n     * Draws the box around the legend\r\n     * @return {Legend} Returns a reference to the instance of Legend\r\n     */\r\n    protected drawBox():Legend {\r\n        // draw box\n\n        let dx:number = this.sibling.domElem.clientWidth - this.sibling.legendWidth + this.marginLeft;\n        let dy:number = this.marginTop;\n\n        this.sibling.svg.append('g')\n            .attr('class', 'punchcard-legend legendbody-box')\r\n            .attr('transform', 'translate(' + dx + ',' + dy + ')' )\n            .append('rect')\n                .attr('width', this.width)\n                .attr('height', this.height)\n                .attr('class', 'legend legendbody-box');\n\n        return this;\n    }\n\n\n\n    /**\r\n     * Draws the Legend's horizontal axis\r\n     * @return {Legend} Returns a reference to the instance of Legend\r\n     */\r\n    private drawHorizontalAxis():Legend {\r\n\n        let dx:number = this.sibling.domElem.clientWidth - this.sibling.legendWidth + this.marginLeft;\n        let dy:number = this.sibling.domElem.clientHeight - this.marginBottom;\n\n        let horizontalAxis = d3.svg.axis()\n            .orient('bottom')\n            .scale(this.horizontalScale)\n            .ticks(0);\n\n        this.sibling.svg.append('g')\n            .attr('class', 'punchcard-legend horizontal-axis')\r\n            .attr('transform', 'translate(' + dx + ',' + dy + ')' );\n\n        return this;\n\n    }\n\n\n\n    /**\r\n     * Draws the Legend's body (but not the colored symbols on it)\r\n     * @return {Legend} Returns a reference to the instance of Legend\r\n     */\r\n    protected drawLegendBody():Legend {\r\n        //\n        let dx:number = this.sibling.domElem.clientWidth - this.sibling.legendWidth + this.marginLeft;\n        let dy:number = this.sibling.domElem.clientHeight - this.marginBottom - this.height;\n\n\n        this.sibling.svg.append('g')\n            .attr('class', 'punchcard-legend legendbody')\r\n            .attr('transform', 'translate(' + dx + ',' + dy + ')' )\n            .append('rect')\n                .attr('width', this.width)\n                .attr('height', this.height)\n                .attr('class', 'legend legendbody');\r\n\n        return this;\n    }\n\n\n\n    /**\r\n     * Draws the Legend's colored symbols, each of which is associated with a\r\n     * certain domain value.\r\n     * @return {Legend} Returns a reference to the instance of Legend\r\n     */\r\n    protected drawSymbols():Legend {\r\n        // pass\n\n        let that:Legend = this;\r\n\n        let dx:number = this.sibling.domElem.clientWidth - this.sibling.legendWidth + this.marginLeft;\n        let dy:number = this.sibling.domElem.clientHeight - this.marginBottom;\n\n        let data: any = [];\n        let nRects:number = 128;\n        for (let iRect = 0; iRect < nRects; iRect += 1) {\n            data.push({\n                    value: this.sibling.colormap.cLimLow +\n                            ((iRect + 0.5) / nRects) * (this.sibling.colormap.cLimHigh - this.sibling.colormap.cLimLow)\n                });\n        }\n\n        let symbolHeight: number = this.height / nRects;\n\n        // draw the rects\n        this.sibling.svg\n            .append('g')\n            .attr('class', 'punchcard-legend symbol')\r\n            .attr('transform', 'translate(' + dx + ',' + dy + ')')\n            .selectAll('rect.symbol')\n                .data(data)\n                .enter()\n                .append('rect')\n                    .attr('class', 'symbol')\n                    .attr('x', 0)\n                    .attr('y', function(d:any){\r\n                        return that.verticalScale(d.value) - 0.5 * symbolHeight;\n                    })\n                    .attr('width', this.width)\n                    .attr('height', symbolHeight)\n                    .attr('fill', function(d:any){\r\n                        return that.sibling.colormap.getColorRGB(d.value);\n                    });\n\n        return this;\n    }\n\n\n\n    /**\r\n     * Draws the Legend's title\r\n     * @return {Legend} Returns a reference to the instance of Legend\r\n     */\r\n    protected drawTitle():Legend {\r\n\n        let dx:number = this.sibling.domElem.clientWidth - this.sibling.legendWidth + this.marginLeft + 0.5 * this.width;\n        let dy:number = this.marginTop - 20;\n\n        this.sibling.svg.append('g')\n            .attr('class', 'punchcard-legend title')\r\n            .attr('transform', 'translate(' + dx + ',' + dy + ')')\n            .append('text')\n            .text(this.title)\n            .attr('class', 'title');\n\n        return this;\n    }\n\n\n\n    /**\r\n     * Draws the Legend's vertical axis, that is used to read the domain value\r\n     * associated with a certain color.\r\n     * @return {Legend} Returns a reference to the instance of Legend\r\n     */\r\n    protected drawVerticalAxis():Legend {\r\n        //\n        let w :number = this.sibling.legendWidth - this.marginLeft - this.marginRight;\n        let h :number = this.sibling.domElem.clientHeight - this.marginTop - this.marginBottom;\n        let dx:number = this.sibling.domElem.clientWidth - this.sibling.legendWidth + this.marginLeft + w;\n        let dy:number = this.sibling.domElem.clientHeight - this.marginBottom;\n\n        this.verticalScale = d3.scale.linear()\n            .range([0, -h])\n            .domain([this.sibling.colormap.cLimLow, this.sibling.colormap.cLimHigh]);\n\n        let verticalAxis = d3.svg.axis()\n            .orient('right')\n            .scale(this.verticalScale)\n            .innerTickSize(5)\n            .outerTickSize(5);\n\n        this.sibling.svg.append('g')\n            .attr('class', 'punchcard-legend vertical-axis')\r\n            .attr('transform', 'translate(' + dx + ',' + dy + ')' )\n            .call(verticalAxis);\n\n        return this;\n\n    }\n\n\n\n    /**\r\n     * Draws the Legend's vertical axis text label\r\n     * @return {Legend} Returns a reference to the instance of Legend\r\n     */\r\n    protected drawVerticalAxisLabel():Legend {\r\n        //\n        let h :number = this.sibling.domElem.clientHeight - this.marginTop - this.marginBottom;\n        let dx:number = this.sibling.domElem.clientWidth - this.marginRight + 40;\n        let dy:number = this.marginTop + 0.5 * h;\n\n        this.sibling.svg.append('g')\n            .attr('class', 'punchcard-legend vertical-axis-label')\r\n            .attr('transform', 'translate(' + dx + ',' + dy + ') rotate(-90)')\n            .append('text')\n            .text(this.ylabel)\n            .attr('class', 'legend vertical-axis-label');\n\n        return this;\n\n    }\n\n\n\n    /**\r\n     * [marginLeft description]\r\n     * @param  {number} marginLeft [description]\r\n     * @return {[type]}            [description]\r\n     */\r\n    protected set marginLeft(marginLeft:number) {\n        this._marginLeft = Math.max(marginLeft, 0);\n    }\n\r\n    /**\r\n     * [marginLeft description]\r\n     * @return {number} [description]\r\n     */\r\n    protected get marginLeft():number {\n        return this._marginLeft;\n    }\n\r\n    /**\r\n     * [marginRight description]\r\n     * @param  {number} marginRight [description]\r\n     * @return {[type]}             [description]\r\n     */\r\n    protected set marginRight(marginRight:number) {\n        this._marginRight = Math.max(marginRight, 0);\n    }\n\r\n    /**\r\n     * [marginRight description]\r\n     * @return {number} [description]\r\n     */\r\n    protected get marginRight():number {\n        return this._marginRight;\n    }\n\r\n    /**\r\n     * [marginTop description]\r\n     * @param  {number} marginTop [description]\r\n     * @return {[type]}           [description]\r\n     */\r\n    protected set marginTop(marginTop:number) {\n        this._marginTop = Math.max(marginTop, this.sibling.marginTop);\n    }\n\r\n    /**\r\n     * [marginTop description]\r\n     * @return {number} [description]\r\n     */\r\n    protected get marginTop():number {\n        return this._marginTop;\n    }\n\r\n    /**\r\n     * [marginBottom description]\r\n     * @param  {number} marginBottom [description]\r\n     * @return {[type]}              [description]\r\n     */\r\n    protected set marginBottom(marginBottom:number) {\n        this._marginBottom = Math.max(marginBottom, this.sibling.marginBottom);\n    }\n\r\n    /**\r\n     * [marginBottom description]\r\n     * @return {number} [description]\r\n     */\r\n    protected get marginBottom():number {\n        return this._marginBottom;\n    }\n\r\n}\r\n\n","l":{"2":1,"20":1,"84":1,"86":81,"89":81,"90":81,"91":81,"92":81,"94":81,"95":81,"97":81,"98":81,"109":1,"112":81,"113":81,"114":81,"115":81,"116":81,"117":81,"118":81,"120":81,"129":1,"132":81,"133":81,"135":81,"143":81,"152":1,"154":81,"155":81,"157":81,"162":81,"166":81,"176":1,"178":81,"179":81,"182":81,"190":81,"200":1,"203":81,"205":81,"206":81,"208":81,"209":81,"210":81,"211":10368,"217":81,"220":81,"231":10368,"236":10368,"239":81,"248":1,"250":81,"251":81,"253":81,"260":81,"270":1,"272":81,"273":81,"274":81,"275":81,"277":81,"281":81,"287":81,"292":81,"302":1,"304":81,"305":81,"306":81,"308":81,"315":81,"326":1,"327":81,"335":648,"343":1,"344":81,"352":243,"360":1,"361":81,"369":486,"377":1,"378":81,"386":567,"389":1}},
"src/punchcards.ts":{"path":"src/punchcards.ts","statementMap":{"1":{"start":{"line":5,"column":0},"end":{"line":5,"column":28}},"2":{"start":{"line":5,"column":8},"end":{"line":5,"column":28}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":36}},"4":{"start":{"line":6,"column":8},"end":{"line":6,"column":36}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":41}},"6":{"start":{"line":7,"column":8},"end":{"line":7,"column":41}},"7":{"start":{"line":8,"column":0},"end":{"line":8,"column":37}},"8":{"start":{"line":8,"column":8},"end":{"line":8,"column":37}},"9":{"start":{"line":9,"column":0},"end":{"line":9,"column":32}},"10":{"start":{"line":9,"column":8},"end":{"line":9,"column":32}},"11":{"start":{"line":10,"column":0},"end":{"line":10,"column":47}},"12":{"start":{"line":10,"column":8},"end":{"line":10,"column":47}},"13":{"start":{"line":11,"column":0},"end":{"line":11,"column":43}},"14":{"start":{"line":11,"column":8},"end":{"line":11,"column":43}}},"fnMap":{},"branchMap":{},"s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1},"b":{},"f":{},"code":"\r\n/**\r\n * This is the Punchcards module\r\n */\r\nexport {Base} from './base';\r\nexport {ColorMap} from './colormap';\r\nexport {DateCircle} from './date-circle';\r\nexport {DateRect} from './date-rect';\r\nexport {Legend} from './legend';\r\nexport {WeekdayCircle} from './weekday-circle';\r\nexport {WeekdayRect} from './weekday-rect';\r\n\r\n","l":{"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1}},
"src/weekday-circle.ts":{"path":"src/weekday-circle.ts","statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":21}},"2":{"start":{"line":3,"column":0},"end":{"line":3,"column":12}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":36}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":43}},"5":{"start":{"line":10,"column":0},"end":{"line":106,"column":1}},"6":{"start":{"line":10,"column":35},"end":{"line":10,"column":46}},"7":{"start":{"line":12,"column":4},"end":{"line":19,"column":5}},"8":{"start":{"line":14,"column":8},"end":{"line":14,"column":29}},"9":{"start":{"line":16,"column":8},"end":{"line":16,"column":36}},"10":{"start":{"line":17,"column":8},"end":{"line":17,"column":43}},"11":{"start":{"line":18,"column":8},"end":{"line":18,"column":46}},"12":{"start":{"line":30,"column":14},"end":{"line":102,"column":5}},"13":{"start":{"line":33,"column":8},"end":{"line":33,"column":38}},"14":{"start":{"line":35,"column":8},"end":{"line":35,"column":105}},"15":{"start":{"line":36,"column":8},"end":{"line":36,"column":87}},"16":{"start":{"line":37,"column":8},"end":{"line":37,"column":40}},"17":{"start":{"line":38,"column":8},"end":{"line":38,"column":43}},"18":{"start":{"line":39,"column":8},"end":{"line":39,"column":65}},"19":{"start":{"line":40,"column":8},"end":{"line":40,"column":81}},"20":{"start":{"line":41,"column":8},"end":{"line":41,"column":82}},"21":{"start":{"line":43,"column":8},"end":{"line":43,"column":67}},"22":{"start":{"line":48,"column":8},"end":{"line":48,"column":57}},"23":{"start":{"line":49,"column":8},"end":{"line":52,"column":11}},"24":{"start":{"line":51,"column":12},"end":{"line":51,"column":38}},"25":{"start":{"line":53,"column":8},"end":{"line":53,"column":35}},"26":{"start":{"line":58,"column":8},"end":{"line":58,"column":46}},"27":{"start":{"line":59,"column":8},"end":{"line":59,"column":47}},"28":{"start":{"line":60,"column":8},"end":{"line":67,"column":9}},"29":{"start":{"line":60,"column":13},"end":{"line":60,"column":21}},"30":{"start":{"line":61,"column":12},"end":{"line":63,"column":13}},"31":{"start":{"line":62,"column":16},"end":{"line":62,"column":36}},"32":{"start":{"line":64,"column":12},"end":{"line":66,"column":13}},"33":{"start":{"line":65,"column":16},"end":{"line":65,"column":37}},"34":{"start":{"line":68,"column":8},"end":{"line":68,"column":39}},"35":{"start":{"line":69,"column":8},"end":{"line":69,"column":41}},"36":{"start":{"line":73,"column":8},"end":{"line":99,"column":23}},"37":{"start":{"line":83,"column":24},"end":{"line":83,"column":89}},"38":{"start":{"line":86,"column":24},"end":{"line":86,"column":103}},"39":{"start":{"line":89,"column":24},"end":{"line":89,"column":75}},"40":{"start":{"line":90,"column":24},"end":{"line":90,"column":90}},"41":{"start":{"line":91,"column":24},"end":{"line":95,"column":25}},"42":{"start":{"line":92,"column":28},"end":{"line":92,"column":50}},"43":{"start":{"line":94,"column":28},"end":{"line":94,"column":66}},"44":{"start":{"line":98,"column":24},"end":{"line":98,"column":66}},"45":{"start":{"line":101,"column":8},"end":{"line":101,"column":20}},"46":{"start":{"line":106,"column":0},"end":{"line":106,"column":1}},"47":{"start":{"line":10,"column":13},"end":{"line":106,"column":1}}},"fnMap":{"1":{"name":"(anonymous_96)","line":10,"loc":{"start":{"line":10,"column":0},"end":{"line":null,"column":-1}}},"2":{"name":"WeekdayCircle","line":12,"loc":{"start":{"line":12,"column":4},"end":{"line":12,"column":68}}},"3":{"name":"(anonymous_98)","line":30,"loc":{"start":{"line":30,"column":4},"end":{"line":null,"column":-1}}},"4":{"name":"(anonymous_99)","line":49,"loc":{"start":{"line":49,"column":28},"end":{"line":49,"column":42}}},"5":{"name":"(anonymous_100)","line":82,"loc":{"start":{"line":82,"column":32},"end":{"line":82,"column":46}}},"6":{"name":"(anonymous_101)","line":85,"loc":{"start":{"line":85,"column":32},"end":{"line":85,"column":46}}},"7":{"name":"(anonymous_102)","line":88,"loc":{"start":{"line":88,"column":31},"end":{"line":88,"column":45}}},"8":{"name":"(anonymous_103)","line":97,"loc":{"start":{"line":97,"column":34},"end":{"line":97,"column":48}}}},"branchMap":{"1":{"line":2,"type":"cond-expr","locations":[{"start":{"line":2,"column":21},"end":{"line":null,"column":-1}},{"start":{"line":2,"column":21},"end":{"line":null,"column":-1}}]},"2":{"line":3,"type":"cond-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":null,"column":-1}},{"start":{"line":3,"column":12},"end":{"line":null,"column":-1}}]},"3":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":12},"end":{"line":61,"column":11}},{"start":{"line":61,"column":12},"end":{"line":61,"column":11}}]},"4":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":12},"end":{"line":64,"column":11}},{"start":{"line":64,"column":12},"end":{"line":64,"column":11}}]},"5":{"line":91,"type":"if","locations":[{"start":{"line":91,"column":24},"end":{"line":91,"column":23}},{"start":{"line":91,"column":24},"end":{"line":91,"column":23}}]}},"s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":8,"9":8,"10":8,"11":8,"12":1,"13":24,"14":24,"15":24,"16":24,"17":24,"18":24,"19":24,"20":24,"21":24,"22":24,"23":24,"24":1132,"25":24,"26":24,"27":24,"28":24,"29":1132,"30":1132,"31":84,"32":1132,"33":64,"34":24,"35":24,"36":24,"37":1132,"38":1132,"39":1132,"40":1132,"41":1132,"42":12,"43":1120,"44":1132,"45":24,"46":1,"47":1},"b":{"1":[1,0],"2":[1,0],"3":[84,1048],"4":[64,1068],"5":[12,1120]},"f":{"1":1,"2":8,"3":24,"4":1132,"5":1132,"6":1132,"7":1132,"8":1132},"code":"\r\nimport 'crossfilter';\r\nimport 'd3';\r\n\r\nimport {ColorMap} from './colormap';\r\nimport {WeekdayRect} from './weekday-rect';\r\n\r\n\r\n\nexport class WeekdayCircle extends WeekdayRect {\r\n\n    constructor (cf: CrossFilter.CrossFilter<any>, domElemId: string) {\r\n\n        super(cf, domElemId);\n\n        this.xlabel = 'Day of week';\n        this.title = 'WeekdayCircle title';\r\n        this.colormap = new ColorMap('blues');\r\n    }\n\n\n\n    /**\r\n     * This method adds an SVG g element containing many SVG circle elements,\r\n     * i.e. the 'symbols', to the DOM. Each symbol represents the count of how\r\n     * many rows from the data fall on a given day/time-of-day combination.\r\n     * @return {WeekdayCircle} Returns a reference to the instance of\r\n     * WeekdayCircle\r\n     */\r\n    protected drawSymbols():WeekdayCircle {\r\n\n        // capture the this object\n        let that:WeekdayCircle = this;\r\n\n        let w :number = this.domElem.clientWidth - this.marginLeft - this.marginRight - this.legendWidth;\n        let h :number = this.domElem.clientHeight - this.marginTop - this.marginBottom;\n        let dx:number = this.marginLeft;\n        let dy:number = this.marginTop + h;\n        let symbolMargin = {left:2, right: 2, top: 2, bottom: 2}; // pixels\n        let symbolWidth :number = w / 7 - symbolMargin.left - symbolMargin.right;\n        let symbolHeight:number = h / 24 - symbolMargin.top - symbolMargin.bottom;\n\n        let r:number = Math.min(symbolWidth, symbolHeight) / 2 - 2;\n\n        // based on example from\n        // http://stackoverflow.com/questions/16766986/is-it-possible-to-group-by-multiple-dimensions-in-crossfilter\n        // forEach method could be very expensive on write.\n        let group = this.dim.weekdayAndHourOfDay.group();\n        group.all().forEach(function(d:any) {\r\n            //parse the json string created above\n            d.key = JSON.parse(d.key);\n        });\n        let data:any = group.all();\n\n\n        // determine the min and max in the count in order to set the color\n        // limits on the colormap later\n        let lowest = Number.POSITIVE_INFINITY;\n        let highest = Number.NEGATIVE_INFINITY;\n        for (let elem of data) {\n            if (elem.value < lowest) {\n                lowest = elem.value;\n            }\n            if (elem.value > highest) {\n                highest = elem.value;\n            }\n        }\n        this.colormap.cLimLow = lowest;\n        this.colormap.cLimHigh = highest;\n\n\n        // draw the circles\r\n        this.svg\n            .append('g')\n            .attr('class', 'symbol')\n            .attr('transform', 'translate(' + dx + ',' + dy + ')')\n            .selectAll('circle.symbol')\n                .data(data)\n                .enter()\n                .append('circle')\n                    .attr('class', 'symbol')\n                    .attr('cx', function(d:any){\r\n                        return that.dayOfWeekScale(d.key['weekday']) + symbolMargin.left;\n                    })\n                    .attr('cy', function(d:any){\r\n                        return that.todScale(d.key['hourOfDay']) + symbolHeight / 2 + symbolMargin.top;\n                    })\n                    .attr('r', function(d:any){\r\n                        let numer:number = d.value - that.colormap.cLimLow;\r\n                        let denom:number = that.colormap.cLimHigh - that.colormap.cLimLow;\r\n                        if (denom === 0) {\r\n                            return Math.max(r, 1);\r\n                        } else {\r\n                            return Math.max(r * numer / denom, 1);\r\n                        }\r\n                    })\r\n                    .attr('fill', function(d:any){\r\n                        return that.colormap.getColorRGB(d.value);\n                    });\n\n        return this;\n    }\n\n\n\n}\n\n\n","l":{"2":1,"3":1,"5":1,"6":1,"10":1,"12":1,"14":8,"16":8,"17":8,"18":8,"30":1,"33":24,"35":24,"36":24,"37":24,"38":24,"39":24,"40":24,"41":24,"43":24,"48":24,"49":24,"51":1132,"53":24,"58":24,"59":24,"60":1132,"61":1132,"62":84,"64":1132,"65":64,"68":24,"69":24,"73":24,"83":1132,"86":1132,"89":1132,"90":1132,"91":1132,"92":12,"94":1120,"98":1132,"101":24,"106":1}},
"src/weekday-rect.ts":{"path":"src/weekday-rect.ts","statementMap":{"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":21}},"2":{"start":{"line":3,"column":0},"end":{"line":3,"column":12}},"3":{"start":{"line":4,"column":0},"end":{"line":4,"column":16}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":28}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":36}},"6":{"start":{"line":10,"column":0},"end":{"line":223,"column":1}},"7":{"start":{"line":10,"column":33},"end":{"line":10,"column":37}},"8":{"start":{"line":26,"column":4},"end":{"line":35,"column":5}},"9":{"start":{"line":28,"column":8},"end":{"line":28,"column":29}},"10":{"start":{"line":30,"column":8},"end":{"line":30,"column":31}},"11":{"start":{"line":31,"column":8},"end":{"line":31,"column":36}},"12":{"start":{"line":32,"column":8},"end":{"line":32,"column":41}},"13":{"start":{"line":33,"column":8},"end":{"line":33,"column":47}},"14":{"start":{"line":44,"column":11},"end":{"line":63,"column":5}},"15":{"start":{"line":47,"column":8},"end":{"line":47,"column":36}},"16":{"start":{"line":52,"column":8},"end":{"line":59,"column":11}},"17":{"start":{"line":54,"column":12},"end":{"line":54,"column":58}},"18":{"start":{"line":55,"column":12},"end":{"line":58,"column":15}},"19":{"start":{"line":60,"column":8},"end":{"line":60,"column":28}},"20":{"start":{"line":62,"column":8},"end":{"line":62,"column":20}},"21":{"start":{"line":83,"column":11},"end":{"line":106,"column":5}},"22":{"start":{"line":85,"column":8},"end":{"line":105,"column":9}},"23":{"start":{"line":87,"column":12},"end":{"line":87,"column":24}},"24":{"start":{"line":90,"column":12},"end":{"line":102,"column":13}},"25":{"start":{"line":92,"column":16},"end":{"line":92,"column":32}},"26":{"start":{"line":93,"column":16},"end":{"line":93,"column":38}},"27":{"start":{"line":94,"column":16},"end":{"line":94,"column":42}},"28":{"start":{"line":95,"column":16},"end":{"line":95,"column":48}},"29":{"start":{"line":96,"column":16},"end":{"line":96,"column":41}},"30":{"start":{"line":97,"column":16},"end":{"line":97,"column":46}},"31":{"start":{"line":98,"column":16},"end":{"line":98,"column":34}},"32":{"start":{"line":99,"column":16},"end":{"line":99,"column":35}},"33":{"start":{"line":100,"column":16},"end":{"line":100,"column":32}},"34":{"start":{"line":101,"column":16},"end":{"line":101,"column":35}},"35":{"start":{"line":104,"column":12},"end":{"line":104,"column":24}},"36":{"start":{"line":116,"column":12},"end":{"line":146,"column":5}},"37":{"start":{"line":118,"column":8},"end":{"line":118,"column":105}},"38":{"start":{"line":119,"column":8},"end":{"line":119,"column":40}},"39":{"start":{"line":120,"column":8},"end":{"line":120,"column":70}},"40":{"start":{"line":122,"column":8},"end":{"line":122,"column":37}},"41":{"start":{"line":123,"column":8},"end":{"line":123,"column":31}},"42":{"start":{"line":124,"column":8},"end":{"line":126,"column":9}},"43":{"start":{"line":124,"column":13},"end":{"line":124,"column":18}},"44":{"start":{"line":125,"column":12},"end":{"line":125,"column":38}},"45":{"start":{"line":128,"column":8},"end":{"line":130,"column":79}},"46":{"start":{"line":132,"column":8},"end":{"line":137,"column":30}},"47":{"start":{"line":139,"column":8},"end":{"line":142,"column":25}},"48":{"start":{"line":144,"column":8},"end":{"line":144,"column":20}},"49":{"start":{"line":157,"column":14},"end":{"line":220,"column":5}},"50":{"start":{"line":160,"column":8},"end":{"line":160,"column":36}},"51":{"start":{"line":162,"column":8},"end":{"line":162,"column":105}},"52":{"start":{"line":163,"column":8},"end":{"line":163,"column":87}},"53":{"start":{"line":164,"column":8},"end":{"line":164,"column":40}},"54":{"start":{"line":165,"column":8},"end":{"line":165,"column":43}},"55":{"start":{"line":166,"column":8},"end":{"line":166,"column":65}},"56":{"start":{"line":167,"column":8},"end":{"line":167,"column":81}},"57":{"start":{"line":168,"column":8},"end":{"line":168,"column":82}},"58":{"start":{"line":173,"column":8},"end":{"line":173,"column":57}},"59":{"start":{"line":174,"column":8},"end":{"line":177,"column":11}},"60":{"start":{"line":176,"column":12},"end":{"line":176,"column":38}},"61":{"start":{"line":178,"column":8},"end":{"line":178,"column":35}},"62":{"start":{"line":183,"column":8},"end":{"line":183,"column":46}},"63":{"start":{"line":184,"column":8},"end":{"line":184,"column":47}},"64":{"start":{"line":185,"column":8},"end":{"line":192,"column":9}},"65":{"start":{"line":185,"column":13},"end":{"line":185,"column":21}},"66":{"start":{"line":186,"column":12},"end":{"line":188,"column":13}},"67":{"start":{"line":187,"column":16},"end":{"line":187,"column":36}},"68":{"start":{"line":189,"column":12},"end":{"line":191,"column":13}},"69":{"start":{"line":190,"column":16},"end":{"line":190,"column":37}},"70":{"start":{"line":193,"column":8},"end":{"line":193,"column":39}},"71":{"start":{"line":194,"column":8},"end":{"line":194,"column":41}},"72":{"start":{"line":198,"column":8},"end":{"line":217,"column":23}},"73":{"start":{"line":208,"column":24},"end":{"line":208,"column":87}},"74":{"start":{"line":211,"column":24},"end":{"line":211,"column":65}},"75":{"start":{"line":216,"column":24},"end":{"line":216,"column":66}},"76":{"start":{"line":219,"column":8},"end":{"line":219,"column":20}},"77":{"start":{"line":223,"column":0},"end":{"line":223,"column":1}},"78":{"start":{"line":10,"column":13},"end":{"line":223,"column":1}}},"fnMap":{"1":{"name":"(anonymous_108)","line":10,"loc":{"start":{"line":10,"column":0},"end":{"line":null,"column":-1}}},"2":{"name":"WeekdayRect","line":26,"loc":{"start":{"line":26,"column":4},"end":{"line":26,"column":68}}},"3":{"name":"(anonymous_110)","line":44,"loc":{"start":{"line":44,"column":4},"end":{"line":null,"column":-1}}},"4":{"name":"(anonymous_111)","line":52,"loc":{"start":{"line":52,"column":57},"end":{"line":52,"column":72}}},"5":{"name":"(anonymous_112)","line":83,"loc":{"start":{"line":83,"column":4},"end":{"line":null,"column":-1}}},"6":{"name":"(anonymous_113)","line":116,"loc":{"start":{"line":116,"column":4},"end":{"line":null,"column":-1}}},"7":{"name":"(anonymous_114)","line":157,"loc":{"start":{"line":157,"column":4},"end":{"line":null,"column":-1}}},"8":{"name":"(anonymous_115)","line":174,"loc":{"start":{"line":174,"column":28},"end":{"line":174,"column":42}}},"9":{"name":"(anonymous_116)","line":207,"loc":{"start":{"line":207,"column":31},"end":{"line":207,"column":45}}},"10":{"name":"(anonymous_117)","line":210,"loc":{"start":{"line":210,"column":31},"end":{"line":210,"column":45}}},"11":{"name":"(anonymous_118)","line":215,"loc":{"start":{"line":215,"column":34},"end":{"line":215,"column":48}}}},"branchMap":{"1":{"line":2,"type":"cond-expr","locations":[{"start":{"line":2,"column":21},"end":{"line":null,"column":-1}},{"start":{"line":2,"column":21},"end":{"line":null,"column":-1}}]},"2":{"line":3,"type":"cond-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":null,"column":-1}},{"start":{"line":3,"column":12},"end":{"line":null,"column":-1}}]},"3":{"line":4,"type":"cond-expr","locations":[{"start":{"line":4,"column":16},"end":{"line":null,"column":-1}},{"start":{"line":4,"column":16},"end":{"line":null,"column":-1}}]},"4":{"line":85,"type":"if","locations":[{"start":{"line":85,"column":8},"end":{"line":85,"column":7}},{"start":{"line":85,"column":8},"end":{"line":85,"column":7}}]},"5":{"line":90,"type":"if","locations":[{"start":{"line":90,"column":12},"end":{"line":90,"column":11}},{"start":{"line":90,"column":12},"end":{"line":90,"column":11}}]},"6":{"line":186,"type":"if","locations":[{"start":{"line":186,"column":12},"end":{"line":186,"column":11}},{"start":{"line":186,"column":12},"end":{"line":186,"column":11}}]},"7":{"line":189,"type":"if","locations":[{"start":{"line":189,"column":12},"end":{"line":189,"column":11}},{"start":{"line":189,"column":12},"end":{"line":189,"column":11}}]}},"s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":15,"10":15,"11":15,"12":15,"13":15,"14":1,"15":13,"16":13,"17":25012,"18":25012,"19":13,"20":13,"21":1,"22":31,"23":0,"24":31,"25":26,"26":26,"27":26,"28":26,"29":26,"30":26,"31":26,"32":26,"33":26,"34":26,"35":31,"36":1,"37":39,"38":39,"39":39,"40":39,"41":39,"42":39,"43":351,"44":351,"45":39,"46":39,"47":39,"48":39,"49":1,"50":14,"51":14,"52":14,"53":14,"54":14,"55":14,"56":14,"57":14,"58":14,"59":14,"60":1120,"61":14,"62":14,"63":14,"64":14,"65":1120,"66":1120,"67":72,"68":1120,"69":54,"70":14,"71":14,"72":14,"73":1120,"74":1120,"75":1120,"76":14,"77":1,"78":1},"b":{"1":[1,0],"2":[1,0],"3":[1,0],"4":[0,31],"5":[26,5],"6":[72,1048],"7":[54,1066]},"f":{"1":1,"2":15,"3":13,"4":25012,"5":31,"6":39,"7":14,"8":1120,"9":1120,"10":1120,"11":1120},"code":"\r\nimport 'crossfilter';\r\nimport 'd3';\r\nimport 'moment';\r\n\r\nimport {Base} from './base';\r\nimport {ColorMap} from './colormap';\r\n\r\n\r\nexport class WeekdayRect extends Base {\r\n\n    protected dayOfWeekScale: d3.scale.Ordinal<any, any>;\r\n    protected xFrom         : number;\r\n    protected xTo           : number;\r\n\n    /**\r\n     * Constructor method for making a punchcard visualization with the day of\r\n     * week on the horizontal axis, and hour of day on the vertical axis, using\r\n     * rectangular symbols to represent how many rows from the input data fall\r\n     * within the area covered by each rectangle.\r\n     * @param  {CrossFilter.CrossFilter<any>} cf Crossfilter object\r\n     * containing the data.\r\n     * @param  {string} domElemId Name of the DOM element in which to draw.\r\n     * @return {[type]} A reference to the instance of WeekdayRect.\r\n     */\r\n    constructor (cf: CrossFilter.CrossFilter<any>, domElemId: string) {\r\n\n        super(cf, domElemId);\n\n        this.marginBottom = 50;\n        this.xlabel = 'Day of week';\n        this.title = 'WeekdayRect title';\r\n        this.colormap = new ColorMap('summer');\r\n\n    }\n\n\n\n\n    /**\r\n     * define the crossfilter dimensions as used by this class\r\n     * @return {WeekdayRect} A reference to the instance of WeekdayRect\r\n     */\r\n    public defineDimensions():WeekdayRect {\r\n\r\n        // store a reference to the instance\r\n        let that:WeekdayRect = this;\r\n\r\n        // based on example from\n        // http://stackoverflow.com/questions/16766986/is-it-possible-to-group-by-multiple-dimensions-in-crossfilter\n\n        this.dim.weekdayAndHourOfDay = this.cf.dimension(function (d:any) {\r\n            //stringify() and later, parse() to get keyed objects\n            let m:moment.Moment = moment(d[that.datekey]);\r\n            return JSON.stringify({\n                weekday: m.format('ddd'),\n                hourOfDay: m.hour()\n            });\n        });\r\n        this.canDraw = true;\r\n\n        return this;\n    }\n\n\n\n\n    /**\r\n     * This method defines which other methods to call in order to create\r\n     * a punchcard graph with the day of week on the horizontal axis and the\r\n     * time of day on the vertical axis. Mostly calls methods of the parent\r\n     * class, Base, but for example the symbols for this class are SVG rects,\r\n     * so it calls its own method .drawSymbols() for that.\r\n     *\r\n     * Successful drawing depends on whether the container is currently visible,\r\n     * and whether there is enough information in the instance to draw anything\r\n     * at all.\r\n     *\r\n     * This method overrides stub method in parent class.\r\n     *\r\n     * @return {WeekdayRect} A reference to an instance of WeekdayRect.\r\n     */\r\n    public draw():WeekdayRect {\r\n\n        if (this.domElem.classList.contains('hidden')) {\n            // div is hidden\n            return this;\n        } else {\r\n            // div is visible\r\n            if (this.canDraw) {\r\n                // dimensions have been defined\r\n                super.drawSvg();\r\n                super.drawChartBody();\r\n                this.drawHorizontalAxis();\r\n                super.drawHorizontalAxisLabel();\r\n                super.drawVerticalAxis();\r\n                super.drawVerticalAxisLabel();\r\n                super.drawTitle();\r\n                this.drawSymbols();\r\n                super.drawBox();\r\n                super.drawLegend();\r\n            }\r\n\n            return this;\n        }\n    }\n\n\n\n\n    /**\r\n     * Adds an SVG g element containing a d3.scale.ordinal for plotting\r\n     * the day of the week on the horizontal axis of the punchcard graph.\r\n     * @return {WeekdayRect} A reference to the instance of WeekdayRect.\r\n     */\r\n    private drawHorizontalAxis():WeekdayRect {\r\n\n        let w :number = this.domElem.clientWidth - this.marginLeft - this.marginRight - this.legendWidth;\n        let dx:number = this.marginLeft;\n        let dy:number = this.domElem.clientHeight - this.marginBottom;\n\n        let range:Array<number> = [];\n        let ndays:number = 7.0;\n        for (let r of [0, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.0]) {\n            range.push(w * r / ndays);\n        }\n\n        this.dayOfWeekScale = d3.scale.ordinal()\n            .range(range)\n            .domain(['', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun', '']);\n\n        let xAxis = d3.svg.axis()\n            .orient('bottom')\n            .scale(this.dayOfWeekScale)\n            .tickValues(['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'])\n            .innerTickSize(5)\n            .outerTickSize(0);\n\n        this.svg.append('g')\n            .attr('class', 'horizontal-axis')\n            .attr('transform', 'translate(' + dx + ',' + dy + ')' )\n            .call(xAxis);\n\n        return this;\n\n    }\n\n\n\n    /**\r\n     * This method adds an SVG g element with many SVG rects in it. Each rect\r\n     * represents the count of how many data rows fall within the area covered\r\n     * by the rect, where the horizontal boundaries dictate the day-of-week and\r\n     * the vertical boundaries dictate the time of day range.\r\n     * @return {WeekdayRect} A reference to the instance of WeekdayRect.\r\n     */\r\n    protected drawSymbols():WeekdayRect {\r\n\n        // capture the this object\n        let that:WeekdayRect = this;\r\n\n        let w :number = this.domElem.clientWidth - this.marginLeft - this.marginRight - this.legendWidth;\n        let h :number = this.domElem.clientHeight - this.marginTop - this.marginBottom;\n        let dx:number = this.marginLeft;\n        let dy:number = this.marginTop + h;\n        let symbolMargin = {left:0, right: 0, top: 0, bottom: 0}; // pixels\n        let symbolWidth :number = w / 7 - symbolMargin.left - symbolMargin.right;\n        let symbolHeight:number = h / 24 - symbolMargin.top - symbolMargin.bottom;\n\n        // based on example from\n        // http://stackoverflow.com/questions/16766986/is-it-possible-to-group-by-multiple-dimensions-in-crossfilter\n        // forEach method could be very expensive on write.\n        let group = this.dim.weekdayAndHourOfDay.group();\n        group.all().forEach(function(d:any) {\r\n            //parse the json string created above\n            d.key = JSON.parse(d.key);\n        });\n        let data:any = group.all();\n\n\n        // determine the min and max in the count in order to set the color\n        // limits on the colormap later\n        let lowest = Number.POSITIVE_INFINITY;\n        let highest = Number.NEGATIVE_INFINITY;\n        for (let elem of data) {\n            if (elem.value < lowest) {\n                lowest = elem.value;\n            }\n            if (elem.value > highest) {\n                highest = elem.value;\n            }\n        }\n        this.colormap.cLimLow = lowest;\n        this.colormap.cLimHigh = highest;\n\n\n        // draw the rects\n        this.svg\n            .append('g')\n            .attr('class', 'symbol')\n            .attr('transform', 'translate(' + dx + ',' + dy + ')')\n            .selectAll('rect.symbol')\n                .data(data)\n                .enter()\n                .append('rect')\n                    .attr('class', 'symbol')\n                    .attr('x', function(d:any){\r\n                        return that.dayOfWeekScale(d.key['weekday']) - symbolWidth / 2;\n                    })\n                    .attr('y', function(d:any){\r\n                        return that.todScale(d.key['hourOfDay']);\n                    })\n                    .attr('width', symbolWidth)\n                    .attr('height', symbolHeight)\n                    .attr('fill', function(d:any){\r\n                        return that.colormap.getColorRGB(d.value);\n                    });\n\n        return this;\n    }\n\r\n\n}\n\n\n","l":{"2":1,"3":1,"4":1,"6":1,"7":1,"10":1,"26":1,"28":15,"30":15,"31":15,"32":15,"33":15,"44":1,"47":13,"52":13,"54":25012,"55":25012,"60":13,"62":13,"83":1,"85":31,"87":0,"90":31,"92":26,"93":26,"94":26,"95":26,"96":26,"97":26,"98":26,"99":26,"100":26,"101":26,"104":31,"116":1,"118":39,"119":39,"120":39,"122":39,"123":39,"124":351,"125":351,"128":39,"132":39,"139":39,"144":39,"157":1,"160":14,"162":14,"163":14,"164":14,"165":14,"166":14,"167":14,"168":14,"173":14,"174":14,"176":1120,"178":14,"183":14,"184":14,"185":1120,"186":1120,"187":72,"189":1120,"190":54,"193":14,"194":14,"198":14,"208":1120,"211":1120,"216":1120,"219":14,"223":1}}}
